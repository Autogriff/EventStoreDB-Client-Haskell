{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Shared where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
newtype UUID = UUID{uuidValue :: Hs.Maybe UUIDValue}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named UUID where
        nameOf _ = (Hs.fromString "UUID")
 
instance HsProtobuf.HasDefault UUID
 
instance HsProtobuf.Message UUID where
        encodeMessage _ UUID{uuidValue = uuidValue}
          = (Hs.mconcat
               [case uuidValue of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             UUIDValueStructured y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Shared.UUID_Structured)
                                        @(HsProtobuf.Nested Shared.UUID_Structured)
                                        (Hs.Just y)))
                             UUIDValueString y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure UUID) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap UUIDValueStructured)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.UUID_Structured))
                        @(_ (Hs.Maybe Shared.UUID_Structured))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.Just Hs.. UUIDValueString)) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB UUID where
        toJSONPB (UUID f1_or_f2)
          = (HsJSONPB.object
               [(let encodeValue
                       = (case f1_or_f2 of
                              Hs.Just (UUIDValueStructured f1) -> (HsJSONPB.pair "structured" f1)
                              Hs.Just (UUIDValueString f2) -> (HsJSONPB.pair "string" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.objectOrNull [encodeValue] options)) options
                       else encodeValue options)])
        toEncodingPB (UUID f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeValue
                       = (case f1_or_f2 of
                              Hs.Just (UUIDValueStructured f1) -> (HsJSONPB.pair "structured" f1)
                              Hs.Just (UUIDValueString f2) -> (HsJSONPB.pair "string" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.pairsOrNull [encodeValue] options)) options
                       else encodeValue options)])
 
instance HsJSONPB.FromJSONPB UUID where
        parseJSONPB
          = (HsJSONPB.withObject "UUID"
               (\ obj ->
                  (Hs.pure UUID) <*>
                    (let parseValue parseObj
                           = Hs.msum
                               [Hs.Just Hs.. UUIDValueStructured <$>
                                  (HsJSONPB.parseField parseObj "structured"),
                                Hs.Just Hs.. UUIDValueString <$>
                                  (HsJSONPB.parseField parseObj "string"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "value") Hs.>>= (HsJSONPB.withObject "value" parseValue))
                         <|> (parseValue obj))))
 
instance HsJSONPB.ToJSON UUID where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON UUID where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema UUID where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               uuidValue <- declare_value Proxy.Proxy
               let _ = Hs.pure UUID <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "UUID",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", uuidValue)]}})
 
data UUID_Structured = UUID_Structured{uuid_StructuredMostSignificantBits
                                       :: Hs.Int64,
                                       uuid_StructuredLeastSignificantBits :: Hs.Int64}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named UUID_Structured where
        nameOf _ = (Hs.fromString "UUID_Structured")
 
instance HsProtobuf.HasDefault UUID_Structured
 
instance HsProtobuf.Message UUID_Structured where
        encodeMessage _
          UUID_Structured{uuid_StructuredMostSignificantBits =
                            uuid_StructuredMostSignificantBits,
                          uuid_StructuredLeastSignificantBits =
                            uuid_StructuredLeastSignificantBits}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   uuid_StructuredMostSignificantBits),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   uuid_StructuredLeastSignificantBits)])
        decodeMessage _
          = (Hs.pure UUID_Structured) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "most_significant_bits")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "least_significant_bits")
                []
                "")]
 
instance HsJSONPB.ToJSONPB UUID_Structured where
        toJSONPB (UUID_Structured f1 f2)
          = (HsJSONPB.object
               ["most_significant_bits" .= f1, "least_significant_bits" .= f2])
        toEncodingPB (UUID_Structured f1 f2)
          = (HsJSONPB.pairs
               ["most_significant_bits" .= f1, "least_significant_bits" .= f2])
 
instance HsJSONPB.FromJSONPB UUID_Structured where
        parseJSONPB
          = (HsJSONPB.withObject "UUID_Structured"
               (\ obj ->
                  (Hs.pure UUID_Structured) <*> obj .: "most_significant_bits" <*>
                    obj .: "least_significant_bits"))
 
instance HsJSONPB.ToJSON UUID_Structured where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON UUID_Structured where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema UUID_Structured where
        declareNamedSchema _
          = do let declare_most_significant_bits = HsJSONPB.declareSchemaRef
               uuid_StructuredMostSignificantBits <- declare_most_significant_bits
                                                       Proxy.Proxy
               let declare_least_significant_bits = HsJSONPB.declareSchemaRef
               uuid_StructuredLeastSignificantBits <- declare_least_significant_bits
                                                        Proxy.Proxy
               let _ = Hs.pure UUID_Structured <*>
                         HsJSONPB.asProxy declare_most_significant_bits
                         <*> HsJSONPB.asProxy declare_least_significant_bits
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "UUID_Structured",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("most_significant_bits",
                                                         uuid_StructuredMostSignificantBits),
                                                        ("least_significant_bits",
                                                         uuid_StructuredLeastSignificantBits)]}})
 
data UUIDValue = UUIDValueStructured Shared.UUID_Structured
               | UUIDValueString Hs.Text
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named UUIDValue where
        nameOf _ = (Hs.fromString "UUIDValue")
 
instance HsJSONPB.ToSchema UUIDValue where
        declareNamedSchema _
          = do let declare_structured = HsJSONPB.declareSchemaRef
               uuidvalueStructured <- declare_structured Proxy.Proxy
               let _ = Hs.pure UUIDValueStructured <*>
                         HsJSONPB.asProxy declare_structured
               let declare_string = HsJSONPB.declareSchemaRef
               uuidvalueString <- declare_string Proxy.Proxy
               let _ = Hs.pure UUIDValueString <*> HsJSONPB.asProxy declare_string
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "UUIDValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("structured", uuidvalueStructured),
                                                        ("string", uuidvalueString)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Empty = Empty{}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Empty where
        nameOf _ = (Hs.fromString "Empty")
 
instance HsProtobuf.HasDefault Empty
 
instance HsProtobuf.Message Empty where
        encodeMessage _ Empty{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Empty)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Empty where
        toJSONPB (Empty) = (HsJSONPB.object [])
        toEncodingPB (Empty) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Empty where
        parseJSONPB
          = (HsJSONPB.withObject "Empty" (\ obj -> (Hs.pure Empty)))
 
instance HsJSONPB.ToJSON Empty where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Empty where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Empty where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Empty",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype StreamIdentifier = StreamIdentifier{streamIdentifierStreamName
                                            :: Hs.ByteString}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named StreamIdentifier where
        nameOf _ = (Hs.fromString "StreamIdentifier")
 
instance HsProtobuf.HasDefault StreamIdentifier
 
instance HsProtobuf.Message StreamIdentifier where
        encodeMessage _
          StreamIdentifier{streamIdentifierStreamName =
                             streamIdentifierStreamName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   streamIdentifierStreamName)])
        decodeMessage _
          = (Hs.pure StreamIdentifier) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "streamName")
                []
                "")]
 
instance HsJSONPB.ToJSONPB StreamIdentifier where
        toJSONPB (StreamIdentifier f3)
          = (HsJSONPB.object ["streamName" .= f3])
        toEncodingPB (StreamIdentifier f3)
          = (HsJSONPB.pairs ["streamName" .= f3])
 
instance HsJSONPB.FromJSONPB StreamIdentifier where
        parseJSONPB
          = (HsJSONPB.withObject "StreamIdentifier"
               (\ obj -> (Hs.pure StreamIdentifier) <*> obj .: "streamName"))
 
instance HsJSONPB.ToJSON StreamIdentifier where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON StreamIdentifier where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema StreamIdentifier where
        declareNamedSchema _
          = do let declare_streamName = HsJSONPB.declareSchemaRef
               streamIdentifierStreamName <- declare_streamName Proxy.Proxy
               let _ = Hs.pure StreamIdentifier <*>
                         HsJSONPB.asProxy declare_streamName
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StreamIdentifier",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("streamName",
                                                         streamIdentifierStreamName)]}})