{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Streams where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Shared
 
data Streams request response = Streams{streamsRead ::
                                        request 'HsGRPC.ServerStreaming Streams.ReadReq
                                          Streams.ReadResp
                                          ->
                                          Hs.IO (response 'HsGRPC.ServerStreaming Streams.ReadResp),
                                        streamsAppend ::
                                        request 'HsGRPC.ClientStreaming Streams.AppendReq
                                          Streams.AppendResp
                                          ->
                                          Hs.IO
                                            (response 'HsGRPC.ClientStreaming Streams.AppendResp),
                                        streamsDelete ::
                                        request 'HsGRPC.Normal Streams.DeleteReq Streams.DeleteResp
                                          -> Hs.IO (response 'HsGRPC.Normal Streams.DeleteResp),
                                        streamsTombstone ::
                                        request 'HsGRPC.Normal Streams.TombstoneReq
                                          Streams.TombstoneResp
                                          -> Hs.IO (response 'HsGRPC.Normal Streams.TombstoneResp)}
                              deriving Hs.Generic
 
streamsServer ::
                Streams HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                  HsGRPC.ServiceOptions -> Hs.IO ()
streamsServer
  Streams{streamsRead = streamsRead, streamsAppend = streamsAppend,
          streamsDelete = streamsDelete, streamsTombstone = streamsTombstone}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/event_store.client.streams.Streams/Delete")
                                   (HsGRPC.convertGeneratedServerHandler streamsDelete)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/event_store.client.streams.Streams/Tombstone")
                                   (HsGRPC.convertGeneratedServerHandler streamsTombstone))],
                             HsGRPC.optClientStreamHandlers =
                               [(HsGRPC.ClientStreamHandler
                                   (HsGRPC.MethodName "/event_store.client.streams.Streams/Append")
                                   (HsGRPC.convertGeneratedServerReaderHandler streamsAppend))],
                             HsGRPC.optServerStreamHandlers =
                               [(HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName "/event_store.client.streams.Streams/Read")
                                   (HsGRPC.convertGeneratedServerWriterHandler streamsRead))],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
streamsClient ::
                HsGRPC.Client ->
                  Hs.IO (Streams HsGRPC.ClientRequest HsGRPC.ClientResult)
streamsClient client
  = (Hs.pure Streams) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/event_store.client.streams.Streams/Read")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/event_store.client.streams.Streams/Append")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/event_store.client.streams.Streams/Delete")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/event_store.client.streams.Streams/Tombstone")))
 
newtype ReadReq = ReadReq{readReqOptions ::
                          Hs.Maybe Streams.ReadReq_Options}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq where
        nameOf _ = (Hs.fromString "ReadReq")
 
instance HsProtobuf.HasDefault ReadReq
 
instance HsProtobuf.Message ReadReq where
        encodeMessage _ ReadReq{readReqOptions = readReqOptions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Streams.ReadReq_Options)
                      @(HsProtobuf.Nested Streams.ReadReq_Options)
                      readReqOptions))])
        decodeMessage _
          = (Hs.pure ReadReq) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadReq_Options))
                 @(_ (Hs.Maybe Streams.ReadReq_Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq where
        toJSONPB (ReadReq f1) = (HsJSONPB.object ["options" .= f1])
        toEncodingPB (ReadReq f1) = (HsJSONPB.pairs ["options" .= f1])
 
instance HsJSONPB.FromJSONPB ReadReq where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq"
               (\ obj -> (Hs.pure ReadReq) <*> obj .: "options"))
 
instance HsJSONPB.ToJSON ReadReq where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq where
        declareNamedSchema _
          = do let declare_options = HsJSONPB.declareSchemaRef
               readReqOptions <- declare_options Proxy.Proxy
               let _ = Hs.pure ReadReq <*> HsJSONPB.asProxy declare_options
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("options", readReqOptions)]}})
 
data ReadReq_Options = ReadReq_Options{readReq_OptionsStreamOption
                                       :: Hs.Maybe ReadReq_OptionsStreamOption,
                                       readReq_OptionsReadDirection ::
                                       HsProtobuf.Enumerated Streams.Options_ReadDirection,
                                       readReq_OptionsResolveLinks :: Hs.Bool,
                                       readReq_OptionsCountOption ::
                                       Hs.Maybe ReadReq_OptionsCountOption,
                                       readReq_OptionsFilterOption ::
                                       Hs.Maybe ReadReq_OptionsFilterOption,
                                       readReq_OptionsUuidOption ::
                                       Hs.Maybe Streams.Options_UUIDOption}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options where
        nameOf _ = (Hs.fromString "ReadReq_Options")
 
instance HsProtobuf.HasDefault ReadReq_Options
 
instance HsProtobuf.Message ReadReq_Options where
        encodeMessage _
          ReadReq_Options{readReq_OptionsStreamOption =
                            readReq_OptionsStreamOption,
                          readReq_OptionsReadDirection = readReq_OptionsReadDirection,
                          readReq_OptionsResolveLinks = readReq_OptionsResolveLinks,
                          readReq_OptionsCountOption = readReq_OptionsCountOption,
                          readReq_OptionsFilterOption = readReq_OptionsFilterOption,
                          readReq_OptionsUuidOption = readReq_OptionsUuidOption}
          = (Hs.mconcat
               [case readReq_OptionsStreamOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_OptionsStreamOptionStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.Options_StreamOptions)
                                        @(HsProtobuf.Nested Streams.Options_StreamOptions)
                                        (Hs.Just y)))
                             ReadReq_OptionsStreamOptionAll y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Streams.Options_AllOptions)
                                        @(HsProtobuf.Nested Streams.Options_AllOptions)
                                        (Hs.Just y))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   readReq_OptionsReadDirection),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   readReq_OptionsResolveLinks),
                case readReq_OptionsCountOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_OptionsCountOptionCount y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit y))
                             ReadReq_OptionsCountOptionSubscription y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (Hs.coerce @(Hs.Maybe Streams.Options_SubscriptionOptions)
                                        @(HsProtobuf.Nested Streams.Options_SubscriptionOptions)
                                        (Hs.Just y))),
                case readReq_OptionsFilterOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_OptionsFilterOptionFilter y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (Hs.coerce @(Hs.Maybe Streams.Options_FilterOptions)
                                        @(HsProtobuf.Nested Streams.Options_FilterOptions)
                                        (Hs.Just y)))
                             ReadReq_OptionsFilterOptionNoFilter y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                   (Hs.coerce @(Hs.Maybe Streams.Options_UUIDOption)
                      @(HsProtobuf.Nested Streams.Options_UUIDOption)
                      readReq_OptionsUuidOption))])
        decodeMessage _
          = (Hs.pure ReadReq_Options) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ReadReq_OptionsStreamOptionStream)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.Options_StreamOptions))
                        @(_ (Hs.Maybe Streams.Options_StreamOptions))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ReadReq_OptionsStreamOptionAll)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.Options_AllOptions))
                        @(_ (Hs.Maybe Streams.Options_AllOptions))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.Just Hs.. ReadReq_OptionsCountOptionCount)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.fmap ReadReq_OptionsCountOptionSubscription)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.Options_SubscriptionOptions))
                        @(_ (Hs.Maybe Streams.Options_SubscriptionOptions))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.fmap ReadReq_OptionsFilterOptionFilter)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.Options_FilterOptions))
                        @(_ (Hs.Maybe Streams.Options_FilterOptions))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.fmap ReadReq_OptionsFilterOptionNoFilter)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.Options_UUIDOption))
                 @(_ (Hs.Maybe Streams.Options_UUIDOption))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 9)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ReadDirection")))
                (HsProtobuf.Single "read_direction")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "resolve_links")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 9)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "UUIDOption")))
                (HsProtobuf.Single "uuid_option")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq_Options where
        toJSONPB (ReadReq_Options f1_or_f2 f3 f4 f5_or_f6 f7_or_f8 f9)
          = (HsJSONPB.object
               [(let encodeStream_option
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_OptionsStreamOptionStream f1)
                                -> (HsJSONPB.pair "stream" f1)
                              Hs.Just (ReadReq_OptionsStreamOptionAll f2)
                                -> (HsJSONPB.pair "all" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("stream_option" .=
                          (HsJSONPB.objectOrNull [encodeStream_option] options))
                         options
                       else encodeStream_option options),
                "read_direction" .= f3, "resolve_links" .= f4,
                (let encodeCount_option
                       = (case f5_or_f6 of
                              Hs.Just (ReadReq_OptionsCountOptionCount f5)
                                -> (HsJSONPB.pair "count" f5)
                              Hs.Just (ReadReq_OptionsCountOptionSubscription f6)
                                -> (HsJSONPB.pair "subscription" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("count_option" .=
                          (HsJSONPB.objectOrNull [encodeCount_option] options))
                         options
                       else encodeCount_option options),
                (let encodeFilter_option
                       = (case f7_or_f8 of
                              Hs.Just (ReadReq_OptionsFilterOptionFilter f7)
                                -> (HsJSONPB.pair "filter" f7)
                              Hs.Just (ReadReq_OptionsFilterOptionNoFilter f8)
                                -> (HsJSONPB.pair "no_filter" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter_option" .=
                          (HsJSONPB.objectOrNull [encodeFilter_option] options))
                         options
                       else encodeFilter_option options),
                "uuid_option" .= f9])
        toEncodingPB (ReadReq_Options f1_or_f2 f3 f4 f5_or_f6 f7_or_f8 f9)
          = (HsJSONPB.pairs
               [(let encodeStream_option
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_OptionsStreamOptionStream f1)
                                -> (HsJSONPB.pair "stream" f1)
                              Hs.Just (ReadReq_OptionsStreamOptionAll f2)
                                -> (HsJSONPB.pair "all" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("stream_option" .=
                          (HsJSONPB.pairsOrNull [encodeStream_option] options))
                         options
                       else encodeStream_option options),
                "read_direction" .= f3, "resolve_links" .= f4,
                (let encodeCount_option
                       = (case f5_or_f6 of
                              Hs.Just (ReadReq_OptionsCountOptionCount f5)
                                -> (HsJSONPB.pair "count" f5)
                              Hs.Just (ReadReq_OptionsCountOptionSubscription f6)
                                -> (HsJSONPB.pair "subscription" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("count_option" .=
                          (HsJSONPB.pairsOrNull [encodeCount_option] options))
                         options
                       else encodeCount_option options),
                (let encodeFilter_option
                       = (case f7_or_f8 of
                              Hs.Just (ReadReq_OptionsFilterOptionFilter f7)
                                -> (HsJSONPB.pair "filter" f7)
                              Hs.Just (ReadReq_OptionsFilterOptionNoFilter f8)
                                -> (HsJSONPB.pair "no_filter" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter_option" .=
                          (HsJSONPB.pairsOrNull [encodeFilter_option] options))
                         options
                       else encodeFilter_option options),
                "uuid_option" .= f9])
 
instance HsJSONPB.FromJSONPB ReadReq_Options where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options"
               (\ obj ->
                  (Hs.pure ReadReq_Options) <*>
                    (let parseStream_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_OptionsStreamOptionStream <$>
                                  (HsJSONPB.parseField parseObj "stream"),
                                Hs.Just Hs.. ReadReq_OptionsStreamOptionAll <$>
                                  (HsJSONPB.parseField parseObj "all"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "stream_option") Hs.>>=
                          (HsJSONPB.withObject "stream_option" parseStream_option))
                         <|> (parseStream_option obj))
                    <*> obj .: "read_direction"
                    <*> obj .: "resolve_links"
                    <*>
                    (let parseCount_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_OptionsCountOptionCount <$>
                                  (HsJSONPB.parseField parseObj "count"),
                                Hs.Just Hs.. ReadReq_OptionsCountOptionSubscription <$>
                                  (HsJSONPB.parseField parseObj "subscription"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "count_option") Hs.>>=
                          (HsJSONPB.withObject "count_option" parseCount_option))
                         <|> (parseCount_option obj))
                    <*>
                    (let parseFilter_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_OptionsFilterOptionFilter <$>
                                  (HsJSONPB.parseField parseObj "filter"),
                                Hs.Just Hs.. ReadReq_OptionsFilterOptionNoFilter <$>
                                  (HsJSONPB.parseField parseObj "no_filter"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "filter_option") Hs.>>=
                          (HsJSONPB.withObject "filter_option" parseFilter_option))
                         <|> (parseFilter_option obj))
                    <*> obj .: "uuid_option"))
 
instance HsJSONPB.ToJSON ReadReq_Options where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options where
        declareNamedSchema _
          = do let declare_stream_option = HsJSONPB.declareSchemaRef
               readReq_OptionsStreamOption <- declare_stream_option Proxy.Proxy
               let declare_read_direction = HsJSONPB.declareSchemaRef
               readReq_OptionsReadDirection <- declare_read_direction Proxy.Proxy
               let declare_resolve_links = HsJSONPB.declareSchemaRef
               readReq_OptionsResolveLinks <- declare_resolve_links Proxy.Proxy
               let declare_count_option = HsJSONPB.declareSchemaRef
               readReq_OptionsCountOption <- declare_count_option Proxy.Proxy
               let declare_filter_option = HsJSONPB.declareSchemaRef
               readReq_OptionsFilterOption <- declare_filter_option Proxy.Proxy
               let declare_uuid_option = HsJSONPB.declareSchemaRef
               readReq_OptionsUuidOption <- declare_uuid_option Proxy.Proxy
               let _ = Hs.pure ReadReq_Options <*>
                         HsJSONPB.asProxy declare_stream_option
                         <*> HsJSONPB.asProxy declare_read_direction
                         <*> HsJSONPB.asProxy declare_resolve_links
                         <*> HsJSONPB.asProxy declare_count_option
                         <*> HsJSONPB.asProxy declare_filter_option
                         <*> HsJSONPB.asProxy declare_uuid_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_option",
                                                         readReq_OptionsStreamOption),
                                                        ("read_direction",
                                                         readReq_OptionsReadDirection),
                                                        ("resolve_links",
                                                         readReq_OptionsResolveLinks),
                                                        ("count_option",
                                                         readReq_OptionsCountOption),
                                                        ("filter_option",
                                                         readReq_OptionsFilterOption),
                                                        ("uuid_option",
                                                         readReq_OptionsUuidOption)]}})
 
data ReadReq_Options_ReadDirection = ReadReq_Options_ReadDirectionForwards
                                   | ReadReq_Options_ReadDirectionBackwards
                                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_ReadDirection where
        nameOf _ = (Hs.fromString "ReadReq_Options_ReadDirection")
 
instance HsProtobuf.HasDefault ReadReq_Options_ReadDirection
 
instance Hs.Bounded ReadReq_Options_ReadDirection where
        minBound = ReadReq_Options_ReadDirectionForwards
        maxBound = ReadReq_Options_ReadDirectionBackwards
 
instance Hs.Ord ReadReq_Options_ReadDirection where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum ReadReq_Options_ReadDirection where
        toProtoEnumMay 0 = Hs.Just ReadReq_Options_ReadDirectionForwards
        toProtoEnumMay 1 = Hs.Just ReadReq_Options_ReadDirectionBackwards
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ReadReq_Options_ReadDirectionForwards) = 0
        fromProtoEnum (ReadReq_Options_ReadDirectionBackwards) = 1
 
instance HsJSONPB.ToJSONPB ReadReq_Options_ReadDirection where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB ReadReq_Options_ReadDirection where
        parseJSONPB (HsJSONPB.String "Forwards")
          = Hs.pure ReadReq_Options_ReadDirectionForwards
        parseJSONPB (HsJSONPB.String "Backwards")
          = Hs.pure ReadReq_Options_ReadDirectionBackwards
        parseJSONPB v
          = (HsJSONPB.typeMismatch "ReadReq_Options_ReadDirection" v)
 
instance HsJSONPB.ToJSON ReadReq_Options_ReadDirection where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_ReadDirection where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite ReadReq_Options_ReadDirection
 
data ReadReq_Options_StreamOptions = ReadReq_Options_StreamOptions{readReq_Options_StreamOptionsStreamIdentifier
                                                                   ::
                                                                   Hs.Maybe Shared.StreamIdentifier,
                                                                   readReq_Options_StreamOptionsRevisionOption
                                                                   ::
                                                                   Hs.Maybe
                                                                     ReadReq_Options_StreamOptionsRevisionOption}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_StreamOptions where
        nameOf _ = (Hs.fromString "ReadReq_Options_StreamOptions")
 
instance HsProtobuf.HasDefault ReadReq_Options_StreamOptions
 
instance HsProtobuf.Message ReadReq_Options_StreamOptions where
        encodeMessage _
          ReadReq_Options_StreamOptions{readReq_Options_StreamOptionsStreamIdentifier
                                          = readReq_Options_StreamOptionsStreamIdentifier,
                                        readReq_Options_StreamOptionsRevisionOption =
                                          readReq_Options_StreamOptionsRevisionOption}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      readReq_Options_StreamOptionsStreamIdentifier)),
                case readReq_Options_StreamOptionsRevisionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_Options_StreamOptionsRevisionOptionRevision y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             ReadReq_Options_StreamOptionsRevisionOptionStart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             ReadReq_Options_StreamOptionsRevisionOptionEnd y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ReadReq_Options_StreamOptions) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.Just Hs.. ReadReq_Options_StreamOptionsRevisionOptionRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure
                      (Hs.fmap ReadReq_Options_StreamOptionsRevisionOptionStart))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ReadReq_Options_StreamOptionsRevisionOptionEnd))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq_Options_StreamOptions where
        toJSONPB (ReadReq_Options_StreamOptions f1 f2_or_f3_or_f4)
          = (HsJSONPB.object
               ["stream_identifier" .= f1,
                (let encodeRevision_option
                       = (case f2_or_f3_or_f4 of
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionStart f3)
                                -> (HsJSONPB.pair "start" f3)
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionEnd f4)
                                -> (HsJSONPB.pair "end" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("revision_option" .=
                          (HsJSONPB.objectOrNull [encodeRevision_option] options))
                         options
                       else encodeRevision_option options)])
        toEncodingPB (ReadReq_Options_StreamOptions f1 f2_or_f3_or_f4)
          = (HsJSONPB.pairs
               ["stream_identifier" .= f1,
                (let encodeRevision_option
                       = (case f2_or_f3_or_f4 of
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionStart f3)
                                -> (HsJSONPB.pair "start" f3)
                              Hs.Just (ReadReq_Options_StreamOptionsRevisionOptionEnd f4)
                                -> (HsJSONPB.pair "end" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("revision_option" .=
                          (HsJSONPB.pairsOrNull [encodeRevision_option] options))
                         options
                       else encodeRevision_option options)])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_StreamOptions where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_StreamOptions"
               (\ obj ->
                  (Hs.pure ReadReq_Options_StreamOptions) <*>
                    obj .: "stream_identifier"
                    <*>
                    (let parseRevision_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_Options_StreamOptionsRevisionOptionRevision
                                  <$> (HsJSONPB.parseField parseObj "revision"),
                                Hs.Just Hs.. ReadReq_Options_StreamOptionsRevisionOptionStart <$>
                                  (HsJSONPB.parseField parseObj "start"),
                                Hs.Just Hs.. ReadReq_Options_StreamOptionsRevisionOptionEnd <$>
                                  (HsJSONPB.parseField parseObj "end"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "revision_option") Hs.>>=
                          (HsJSONPB.withObject "revision_option" parseRevision_option))
                         <|> (parseRevision_option obj))))
 
instance HsJSONPB.ToJSON ReadReq_Options_StreamOptions where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_StreamOptions where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_StreamOptions where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               readReq_Options_StreamOptionsStreamIdentifier <- declare_stream_identifier
                                                                  Proxy.Proxy
               let declare_revision_option = HsJSONPB.declareSchemaRef
               readReq_Options_StreamOptionsRevisionOption <- declare_revision_option
                                                                Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_StreamOptions <*>
                         HsJSONPB.asProxy declare_stream_identifier
                         <*> HsJSONPB.asProxy declare_revision_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_StreamOptions",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         readReq_Options_StreamOptionsStreamIdentifier),
                                                        ("revision_option",
                                                         readReq_Options_StreamOptionsRevisionOption)]}})
 
data ReadReq_Options_StreamOptionsRevisionOption = ReadReq_Options_StreamOptionsRevisionOptionRevision Hs.Word64
                                                 | ReadReq_Options_StreamOptionsRevisionOptionStart Shared.Empty
                                                 | ReadReq_Options_StreamOptionsRevisionOptionEnd Shared.Empty
                                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                           Hs.NFData)
 
instance HsProtobuf.Named
         ReadReq_Options_StreamOptionsRevisionOption where
        nameOf _
          = (Hs.fromString "ReadReq_Options_StreamOptionsRevisionOption")
 
instance HsJSONPB.ToSchema
         ReadReq_Options_StreamOptionsRevisionOption where
        declareNamedSchema _
          = do let declare_revision = HsJSONPB.declareSchemaRef
               readReq_Options_StreamOptionsRevisionOptionRevision <- declare_revision
                                                                        Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_StreamOptionsRevisionOptionRevision
                         <*> HsJSONPB.asProxy declare_revision
               let declare_start = HsJSONPB.declareSchemaRef
               readReq_Options_StreamOptionsRevisionOptionStart <- declare_start
                                                                     Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_StreamOptionsRevisionOptionStart
                         <*> HsJSONPB.asProxy declare_start
               let declare_end = HsJSONPB.declareSchemaRef
               readReq_Options_StreamOptionsRevisionOptionEnd <- declare_end
                                                                   Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_StreamOptionsRevisionOptionEnd <*>
                         HsJSONPB.asProxy declare_end
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_StreamOptionsRevisionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("revision",
                                                         readReq_Options_StreamOptionsRevisionOptionRevision),
                                                        ("start",
                                                         readReq_Options_StreamOptionsRevisionOptionStart),
                                                        ("end",
                                                         readReq_Options_StreamOptionsRevisionOptionEnd)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ReadReq_Options_AllOptions = ReadReq_Options_AllOptions{readReq_Options_AllOptionsAllOption
                                                                ::
                                                                Hs.Maybe
                                                                  ReadReq_Options_AllOptionsAllOption}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_AllOptions where
        nameOf _ = (Hs.fromString "ReadReq_Options_AllOptions")
 
instance HsProtobuf.HasDefault ReadReq_Options_AllOptions
 
instance HsProtobuf.Message ReadReq_Options_AllOptions where
        encodeMessage _
          ReadReq_Options_AllOptions{readReq_Options_AllOptionsAllOption =
                                       readReq_Options_AllOptionsAllOption}
          = (Hs.mconcat
               [case readReq_Options_AllOptionsAllOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_Options_AllOptionsAllOptionPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.Options_Position)
                                        @(HsProtobuf.Nested Streams.Options_Position)
                                        (Hs.Just y)))
                             ReadReq_Options_AllOptionsAllOptionStart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             ReadReq_Options_AllOptionsAllOptionEnd y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ReadReq_Options_AllOptions) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ReadReq_Options_AllOptionsAllOptionPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.Options_Position))
                        @(_ (Hs.Maybe Streams.Options_Position))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ReadReq_Options_AllOptionsAllOptionStart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap ReadReq_Options_AllOptionsAllOptionEnd)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ReadReq_Options_AllOptions where
        toJSONPB (ReadReq_Options_AllOptions f1_or_f2_or_f3)
          = (HsJSONPB.object
               [(let encodeAll_option
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionStart f2)
                                -> (HsJSONPB.pair "start" f2)
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionEnd f3)
                                -> (HsJSONPB.pair "end" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("all_option" .=
                          (HsJSONPB.objectOrNull [encodeAll_option] options))
                         options
                       else encodeAll_option options)])
        toEncodingPB (ReadReq_Options_AllOptions f1_or_f2_or_f3)
          = (HsJSONPB.pairs
               [(let encodeAll_option
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionStart f2)
                                -> (HsJSONPB.pair "start" f2)
                              Hs.Just (ReadReq_Options_AllOptionsAllOptionEnd f3)
                                -> (HsJSONPB.pair "end" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("all_option" .= (HsJSONPB.pairsOrNull [encodeAll_option] options))
                         options
                       else encodeAll_option options)])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_AllOptions where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_AllOptions"
               (\ obj ->
                  (Hs.pure ReadReq_Options_AllOptions) <*>
                    (let parseAll_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_Options_AllOptionsAllOptionPosition <$>
                                  (HsJSONPB.parseField parseObj "position"),
                                Hs.Just Hs.. ReadReq_Options_AllOptionsAllOptionStart <$>
                                  (HsJSONPB.parseField parseObj "start"),
                                Hs.Just Hs.. ReadReq_Options_AllOptionsAllOptionEnd <$>
                                  (HsJSONPB.parseField parseObj "end"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "all_option") Hs.>>=
                          (HsJSONPB.withObject "all_option" parseAll_option))
                         <|> (parseAll_option obj))))
 
instance HsJSONPB.ToJSON ReadReq_Options_AllOptions where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_AllOptions where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_AllOptions where
        declareNamedSchema _
          = do let declare_all_option = HsJSONPB.declareSchemaRef
               readReq_Options_AllOptionsAllOption <- declare_all_option
                                                        Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_AllOptions <*>
                         HsJSONPB.asProxy declare_all_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_AllOptions",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("all_option",
                                                         readReq_Options_AllOptionsAllOption)]}})
 
data ReadReq_Options_AllOptionsAllOption = ReadReq_Options_AllOptionsAllOptionPosition Streams.Options_Position
                                         | ReadReq_Options_AllOptionsAllOptionStart Shared.Empty
                                         | ReadReq_Options_AllOptionsAllOptionEnd Shared.Empty
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_AllOptionsAllOption where
        nameOf _ = (Hs.fromString "ReadReq_Options_AllOptionsAllOption")
 
instance HsJSONPB.ToSchema ReadReq_Options_AllOptionsAllOption
         where
        declareNamedSchema _
          = do let declare_position = HsJSONPB.declareSchemaRef
               readReq_Options_AllOptionsAllOptionPosition <- declare_position
                                                                Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_AllOptionsAllOptionPosition <*>
                         HsJSONPB.asProxy declare_position
               let declare_start = HsJSONPB.declareSchemaRef
               readReq_Options_AllOptionsAllOptionStart <- declare_start
                                                             Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_AllOptionsAllOptionStart <*>
                         HsJSONPB.asProxy declare_start
               let declare_end = HsJSONPB.declareSchemaRef
               readReq_Options_AllOptionsAllOptionEnd <- declare_end Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_AllOptionsAllOptionEnd <*>
                         HsJSONPB.asProxy declare_end
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_AllOptionsAllOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position",
                                                         readReq_Options_AllOptionsAllOptionPosition),
                                                        ("start",
                                                         readReq_Options_AllOptionsAllOptionStart),
                                                        ("end",
                                                         readReq_Options_AllOptionsAllOptionEnd)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ReadReq_Options_SubscriptionOptions = ReadReq_Options_SubscriptionOptions{}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_SubscriptionOptions where
        nameOf _ = (Hs.fromString "ReadReq_Options_SubscriptionOptions")
 
instance HsProtobuf.HasDefault ReadReq_Options_SubscriptionOptions
 
instance HsProtobuf.Message ReadReq_Options_SubscriptionOptions
         where
        encodeMessage _ ReadReq_Options_SubscriptionOptions{}
          = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ReadReq_Options_SubscriptionOptions)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ReadReq_Options_SubscriptionOptions
         where
        toJSONPB (ReadReq_Options_SubscriptionOptions)
          = (HsJSONPB.object [])
        toEncodingPB (ReadReq_Options_SubscriptionOptions)
          = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_SubscriptionOptions
         where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_SubscriptionOptions"
               (\ obj -> (Hs.pure ReadReq_Options_SubscriptionOptions)))
 
instance HsJSONPB.ToJSON ReadReq_Options_SubscriptionOptions where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_SubscriptionOptions
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_SubscriptionOptions
         where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_SubscriptionOptions",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ReadReq_Options_Position = ReadReq_Options_Position{readReq_Options_PositionCommitPosition
                                                         :: Hs.Word64,
                                                         readReq_Options_PositionPreparePosition ::
                                                         Hs.Word64}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_Position where
        nameOf _ = (Hs.fromString "ReadReq_Options_Position")
 
instance HsProtobuf.HasDefault ReadReq_Options_Position
 
instance HsProtobuf.Message ReadReq_Options_Position where
        encodeMessage _
          ReadReq_Options_Position{readReq_Options_PositionCommitPosition =
                                     readReq_Options_PositionCommitPosition,
                                   readReq_Options_PositionPreparePosition =
                                     readReq_Options_PositionPreparePosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   readReq_Options_PositionCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   readReq_Options_PositionPreparePosition)])
        decodeMessage _
          = (Hs.pure ReadReq_Options_Position) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq_Options_Position where
        toJSONPB (ReadReq_Options_Position f1 f2)
          = (HsJSONPB.object
               ["commit_position" .= f1, "prepare_position" .= f2])
        toEncodingPB (ReadReq_Options_Position f1 f2)
          = (HsJSONPB.pairs
               ["commit_position" .= f1, "prepare_position" .= f2])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_Position where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_Position"
               (\ obj ->
                  (Hs.pure ReadReq_Options_Position) <*> obj .: "commit_position" <*>
                    obj .: "prepare_position"))
 
instance HsJSONPB.ToJSON ReadReq_Options_Position where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_Position where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_Position where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               readReq_Options_PositionCommitPosition <- declare_commit_position
                                                           Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               readReq_Options_PositionPreparePosition <- declare_prepare_position
                                                            Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_Position <*>
                         HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_prepare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_Position",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         readReq_Options_PositionCommitPosition),
                                                        ("prepare_position",
                                                         readReq_Options_PositionPreparePosition)]}})
 
data ReadReq_Options_FilterOptions = ReadReq_Options_FilterOptions{readReq_Options_FilterOptionsFilter
                                                                   ::
                                                                   Hs.Maybe
                                                                     ReadReq_Options_FilterOptionsFilter,
                                                                   readReq_Options_FilterOptionsWindow
                                                                   ::
                                                                   Hs.Maybe
                                                                     ReadReq_Options_FilterOptionsWindow,
                                                                   readReq_Options_FilterOptionsCheckpointIntervalMultiplier
                                                                   :: Hs.Word32}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_FilterOptions where
        nameOf _ = (Hs.fromString "ReadReq_Options_FilterOptions")
 
instance HsProtobuf.HasDefault ReadReq_Options_FilterOptions
 
instance HsProtobuf.Message ReadReq_Options_FilterOptions where
        encodeMessage _
          ReadReq_Options_FilterOptions{readReq_Options_FilterOptionsFilter =
                                          readReq_Options_FilterOptionsFilter,
                                        readReq_Options_FilterOptionsWindow =
                                          readReq_Options_FilterOptionsWindow,
                                        readReq_Options_FilterOptionsCheckpointIntervalMultiplier =
                                          readReq_Options_FilterOptionsCheckpointIntervalMultiplier}
          = (Hs.mconcat
               [case readReq_Options_FilterOptionsFilter of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_Options_FilterOptionsFilterStreamIdentifier y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.FilterOptions_Expression)
                                        @(HsProtobuf.Nested Streams.FilterOptions_Expression)
                                        (Hs.Just y)))
                             ReadReq_Options_FilterOptionsFilterEventType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Streams.FilterOptions_Expression)
                                        @(HsProtobuf.Nested Streams.FilterOptions_Expression)
                                        (Hs.Just y))),
                case readReq_Options_FilterOptionsWindow of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_Options_FilterOptionsWindowMax y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             ReadReq_Options_FilterOptionsWindowCount y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   readReq_Options_FilterOptionsCheckpointIntervalMultiplier)])
        decodeMessage _
          = (Hs.pure ReadReq_Options_FilterOptions) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure
                      (Hs.fmap ReadReq_Options_FilterOptionsFilterStreamIdentifier))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.FilterOptions_Expression))
                        @(_ (Hs.Maybe Streams.FilterOptions_Expression))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ReadReq_Options_FilterOptionsFilterEventType))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.FilterOptions_Expression))
                        @(_ (Hs.Maybe Streams.FilterOptions_Expression))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. ReadReq_Options_FilterOptionsWindowMax)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ReadReq_Options_FilterOptionsWindowCount)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "checkpointIntervalMultiplier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq_Options_FilterOptions where
        toJSONPB (ReadReq_Options_FilterOptions f1_or_f2 f3_or_f4 f5)
          = (HsJSONPB.object
               [(let encodeFilter
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_Options_FilterOptionsFilterStreamIdentifier f1)
                                -> (HsJSONPB.pair "stream_identifier" f1)
                              Hs.Just (ReadReq_Options_FilterOptionsFilterEventType f2)
                                -> (HsJSONPB.pair "event_type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.objectOrNull [encodeFilter] options))
                         options
                       else encodeFilter options),
                (let encodeWindow
                       = (case f3_or_f4 of
                              Hs.Just (ReadReq_Options_FilterOptionsWindowMax f3)
                                -> (HsJSONPB.pair "max" f3)
                              Hs.Just (ReadReq_Options_FilterOptionsWindowCount f4)
                                -> (HsJSONPB.pair "count" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("window" .= (HsJSONPB.objectOrNull [encodeWindow] options))
                         options
                       else encodeWindow options),
                "checkpointIntervalMultiplier" .= f5])
        toEncodingPB (ReadReq_Options_FilterOptions f1_or_f2 f3_or_f4 f5)
          = (HsJSONPB.pairs
               [(let encodeFilter
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_Options_FilterOptionsFilterStreamIdentifier f1)
                                -> (HsJSONPB.pair "stream_identifier" f1)
                              Hs.Just (ReadReq_Options_FilterOptionsFilterEventType f2)
                                -> (HsJSONPB.pair "event_type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.pairsOrNull [encodeFilter] options)) options
                       else encodeFilter options),
                (let encodeWindow
                       = (case f3_or_f4 of
                              Hs.Just (ReadReq_Options_FilterOptionsWindowMax f3)
                                -> (HsJSONPB.pair "max" f3)
                              Hs.Just (ReadReq_Options_FilterOptionsWindowCount f4)
                                -> (HsJSONPB.pair "count" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("window" .= (HsJSONPB.pairsOrNull [encodeWindow] options)) options
                       else encodeWindow options),
                "checkpointIntervalMultiplier" .= f5])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_FilterOptions where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_FilterOptions"
               (\ obj ->
                  (Hs.pure ReadReq_Options_FilterOptions) <*>
                    (let parseFilter parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_Options_FilterOptionsFilterStreamIdentifier
                                  <$> (HsJSONPB.parseField parseObj "stream_identifier"),
                                Hs.Just Hs.. ReadReq_Options_FilterOptionsFilterEventType <$>
                                  (HsJSONPB.parseField parseObj "event_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "filter") Hs.>>=
                          (HsJSONPB.withObject "filter" parseFilter))
                         <|> (parseFilter obj))
                    <*>
                    (let parseWindow parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_Options_FilterOptionsWindowMax <$>
                                  (HsJSONPB.parseField parseObj "max"),
                                Hs.Just Hs.. ReadReq_Options_FilterOptionsWindowCount <$>
                                  (HsJSONPB.parseField parseObj "count"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "window") Hs.>>=
                          (HsJSONPB.withObject "window" parseWindow))
                         <|> (parseWindow obj))
                    <*> obj .: "checkpointIntervalMultiplier"))
 
instance HsJSONPB.ToJSON ReadReq_Options_FilterOptions where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_FilterOptions where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_FilterOptions where
        declareNamedSchema _
          = do let declare_filter = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsFilter <- declare_filter Proxy.Proxy
               let declare_window = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsWindow <- declare_window Proxy.Proxy
               let declare_checkpointIntervalMultiplier
                     = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsCheckpointIntervalMultiplier <- declare_checkpointIntervalMultiplier
                                                                              Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptions <*>
                         HsJSONPB.asProxy declare_filter
                         <*> HsJSONPB.asProxy declare_window
                         <*> HsJSONPB.asProxy declare_checkpointIntervalMultiplier
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_FilterOptions",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("filter",
                                                         readReq_Options_FilterOptionsFilter),
                                                        ("window",
                                                         readReq_Options_FilterOptionsWindow),
                                                        ("checkpointIntervalMultiplier",
                                                         readReq_Options_FilterOptionsCheckpointIntervalMultiplier)]}})
 
data ReadReq_Options_FilterOptions_Expression = ReadReq_Options_FilterOptions_Expression{readReq_Options_FilterOptions_ExpressionRegex
                                                                                         :: Hs.Text,
                                                                                         readReq_Options_FilterOptions_ExpressionPrefix
                                                                                         ::
                                                                                         Hs.Vector
                                                                                           Hs.Text}
                                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                        Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_FilterOptions_Expression
         where
        nameOf _
          = (Hs.fromString "ReadReq_Options_FilterOptions_Expression")
 
instance HsProtobuf.HasDefault
         ReadReq_Options_FilterOptions_Expression
 
instance HsProtobuf.Message
         ReadReq_Options_FilterOptions_Expression where
        encodeMessage _
          ReadReq_Options_FilterOptions_Expression{readReq_Options_FilterOptions_ExpressionRegex
                                                     =
                                                     readReq_Options_FilterOptions_ExpressionRegex,
                                                   readReq_Options_FilterOptions_ExpressionPrefix =
                                                     readReq_Options_FilterOptions_ExpressionPrefix}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   readReq_Options_FilterOptions_ExpressionRegex),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      readReq_Options_FilterOptions_ExpressionPrefix))])
        decodeMessage _
          = (Hs.pure ReadReq_Options_FilterOptions_Expression) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "regex")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "prefix")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadReq_Options_FilterOptions_Expression
         where
        toJSONPB (ReadReq_Options_FilterOptions_Expression f1 f2)
          = (HsJSONPB.object ["regex" .= f1, "prefix" .= f2])
        toEncodingPB (ReadReq_Options_FilterOptions_Expression f1 f2)
          = (HsJSONPB.pairs ["regex" .= f1, "prefix" .= f2])
 
instance HsJSONPB.FromJSONPB
         ReadReq_Options_FilterOptions_Expression where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_FilterOptions_Expression"
               (\ obj ->
                  (Hs.pure ReadReq_Options_FilterOptions_Expression) <*>
                    obj .: "regex"
                    <*> obj .: "prefix"))
 
instance HsJSONPB.ToJSON ReadReq_Options_FilterOptions_Expression
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_FilterOptions_Expression
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_FilterOptions_Expression
         where
        declareNamedSchema _
          = do let declare_regex = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptions_ExpressionRegex <- declare_regex
                                                                  Proxy.Proxy
               let declare_prefix = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptions_ExpressionPrefix <- declare_prefix
                                                                   Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptions_Expression <*>
                         HsJSONPB.asProxy declare_regex
                         <*> HsJSONPB.asProxy declare_prefix
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_FilterOptions_Expression",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("regex",
                                                         readReq_Options_FilterOptions_ExpressionRegex),
                                                        ("prefix",
                                                         readReq_Options_FilterOptions_ExpressionPrefix)]}})
 
data ReadReq_Options_FilterOptionsFilter = ReadReq_Options_FilterOptionsFilterStreamIdentifier Streams.FilterOptions_Expression
                                         | ReadReq_Options_FilterOptionsFilterEventType Streams.FilterOptions_Expression
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_FilterOptionsFilter where
        nameOf _ = (Hs.fromString "ReadReq_Options_FilterOptionsFilter")
 
instance HsJSONPB.ToSchema ReadReq_Options_FilterOptionsFilter
         where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsFilterStreamIdentifier <- declare_stream_identifier
                                                                        Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptionsFilterStreamIdentifier
                         <*> HsJSONPB.asProxy declare_stream_identifier
               let declare_event_type = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsFilterEventType <- declare_event_type
                                                                 Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptionsFilterEventType <*>
                         HsJSONPB.asProxy declare_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_FilterOptionsFilter",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         readReq_Options_FilterOptionsFilterStreamIdentifier),
                                                        ("event_type",
                                                         readReq_Options_FilterOptionsFilterEventType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ReadReq_Options_FilterOptionsWindow = ReadReq_Options_FilterOptionsWindowMax Hs.Word32
                                         | ReadReq_Options_FilterOptionsWindowCount Shared.Empty
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_FilterOptionsWindow where
        nameOf _ = (Hs.fromString "ReadReq_Options_FilterOptionsWindow")
 
instance HsJSONPB.ToSchema ReadReq_Options_FilterOptionsWindow
         where
        declareNamedSchema _
          = do let declare_max = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsWindowMax <- declare_max Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptionsWindowMax <*>
                         HsJSONPB.asProxy declare_max
               let declare_count = HsJSONPB.declareSchemaRef
               readReq_Options_FilterOptionsWindowCount <- declare_count
                                                             Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_FilterOptionsWindowCount <*>
                         HsJSONPB.asProxy declare_count
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_FilterOptionsWindow",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("max",
                                                         readReq_Options_FilterOptionsWindowMax),
                                                        ("count",
                                                         readReq_Options_FilterOptionsWindowCount)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ReadReq_Options_UUIDOption = ReadReq_Options_UUIDOption{readReq_Options_UUIDOptionContent
                                                                ::
                                                                Hs.Maybe
                                                                  ReadReq_Options_UUIDOptionContent}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_UUIDOption where
        nameOf _ = (Hs.fromString "ReadReq_Options_UUIDOption")
 
instance HsProtobuf.HasDefault ReadReq_Options_UUIDOption
 
instance HsProtobuf.Message ReadReq_Options_UUIDOption where
        encodeMessage _
          ReadReq_Options_UUIDOption{readReq_Options_UUIDOptionContent =
                                       readReq_Options_UUIDOptionContent}
          = (Hs.mconcat
               [case readReq_Options_UUIDOptionContent of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadReq_Options_UUIDOptionContentStructured y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             ReadReq_Options_UUIDOptionContentString y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ReadReq_Options_UUIDOption) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ReadReq_Options_UUIDOptionContentStructured)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ReadReq_Options_UUIDOptionContentString)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ReadReq_Options_UUIDOption where
        toJSONPB (ReadReq_Options_UUIDOption f1_or_f2)
          = (HsJSONPB.object
               [(let encodeContent
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_Options_UUIDOptionContentStructured f1)
                                -> (HsJSONPB.pair "structured" f1)
                              Hs.Just (ReadReq_Options_UUIDOptionContentString f2)
                                -> (HsJSONPB.pair "string" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.objectOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
        toEncodingPB (ReadReq_Options_UUIDOption f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeContent
                       = (case f1_or_f2 of
                              Hs.Just (ReadReq_Options_UUIDOptionContentStructured f1)
                                -> (HsJSONPB.pair "structured" f1)
                              Hs.Just (ReadReq_Options_UUIDOptionContentString f2)
                                -> (HsJSONPB.pair "string" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.pairsOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
 
instance HsJSONPB.FromJSONPB ReadReq_Options_UUIDOption where
        parseJSONPB
          = (HsJSONPB.withObject "ReadReq_Options_UUIDOption"
               (\ obj ->
                  (Hs.pure ReadReq_Options_UUIDOption) <*>
                    (let parseContent parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadReq_Options_UUIDOptionContentStructured <$>
                                  (HsJSONPB.parseField parseObj "structured"),
                                Hs.Just Hs.. ReadReq_Options_UUIDOptionContentString <$>
                                  (HsJSONPB.parseField parseObj "string"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "content") Hs.>>=
                          (HsJSONPB.withObject "content" parseContent))
                         <|> (parseContent obj))))
 
instance HsJSONPB.ToJSON ReadReq_Options_UUIDOption where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadReq_Options_UUIDOption where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadReq_Options_UUIDOption where
        declareNamedSchema _
          = do let declare_content = HsJSONPB.declareSchemaRef
               readReq_Options_UUIDOptionContent <- declare_content Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_UUIDOption <*>
                         HsJSONPB.asProxy declare_content
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_UUIDOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("content",
                                                         readReq_Options_UUIDOptionContent)]}})
 
data ReadReq_Options_UUIDOptionContent = ReadReq_Options_UUIDOptionContentStructured Shared.Empty
                                       | ReadReq_Options_UUIDOptionContentString Shared.Empty
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_Options_UUIDOptionContent where
        nameOf _ = (Hs.fromString "ReadReq_Options_UUIDOptionContent")
 
instance HsJSONPB.ToSchema ReadReq_Options_UUIDOptionContent where
        declareNamedSchema _
          = do let declare_structured = HsJSONPB.declareSchemaRef
               readReq_Options_UUIDOptionContentStructured <- declare_structured
                                                                Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_UUIDOptionContentStructured <*>
                         HsJSONPB.asProxy declare_structured
               let declare_string = HsJSONPB.declareSchemaRef
               readReq_Options_UUIDOptionContentString <- declare_string
                                                            Proxy.Proxy
               let _ = Hs.pure ReadReq_Options_UUIDOptionContentString <*>
                         HsJSONPB.asProxy declare_string
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_Options_UUIDOptionContent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("structured",
                                                         readReq_Options_UUIDOptionContentStructured),
                                                        ("string",
                                                         readReq_Options_UUIDOptionContentString)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ReadReq_OptionsStreamOption = ReadReq_OptionsStreamOptionStream Streams.Options_StreamOptions
                                 | ReadReq_OptionsStreamOptionAll Streams.Options_AllOptions
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_OptionsStreamOption where
        nameOf _ = (Hs.fromString "ReadReq_OptionsStreamOption")
 
instance HsJSONPB.ToSchema ReadReq_OptionsStreamOption where
        declareNamedSchema _
          = do let declare_stream = HsJSONPB.declareSchemaRef
               readReq_OptionsStreamOptionStream <- declare_stream Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsStreamOptionStream <*>
                         HsJSONPB.asProxy declare_stream
               let declare_all = HsJSONPB.declareSchemaRef
               readReq_OptionsStreamOptionAll <- declare_all Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsStreamOptionAll <*>
                         HsJSONPB.asProxy declare_all
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_OptionsStreamOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream",
                                                         readReq_OptionsStreamOptionStream),
                                                        ("all", readReq_OptionsStreamOptionAll)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ReadReq_OptionsCountOption = ReadReq_OptionsCountOptionCount Hs.Word64
                                | ReadReq_OptionsCountOptionSubscription Streams.Options_SubscriptionOptions
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_OptionsCountOption where
        nameOf _ = (Hs.fromString "ReadReq_OptionsCountOption")
 
instance HsJSONPB.ToSchema ReadReq_OptionsCountOption where
        declareNamedSchema _
          = do let declare_count = HsJSONPB.declareSchemaRef
               readReq_OptionsCountOptionCount <- declare_count Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsCountOptionCount <*>
                         HsJSONPB.asProxy declare_count
               let declare_subscription = HsJSONPB.declareSchemaRef
               readReq_OptionsCountOptionSubscription <- declare_subscription
                                                           Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsCountOptionSubscription <*>
                         HsJSONPB.asProxy declare_subscription
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_OptionsCountOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("count", readReq_OptionsCountOptionCount),
                                                        ("subscription",
                                                         readReq_OptionsCountOptionSubscription)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ReadReq_OptionsFilterOption = ReadReq_OptionsFilterOptionFilter Streams.Options_FilterOptions
                                 | ReadReq_OptionsFilterOptionNoFilter Shared.Empty
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadReq_OptionsFilterOption where
        nameOf _ = (Hs.fromString "ReadReq_OptionsFilterOption")
 
instance HsJSONPB.ToSchema ReadReq_OptionsFilterOption where
        declareNamedSchema _
          = do let declare_filter = HsJSONPB.declareSchemaRef
               readReq_OptionsFilterOptionFilter <- declare_filter Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsFilterOptionFilter <*>
                         HsJSONPB.asProxy declare_filter
               let declare_no_filter = HsJSONPB.declareSchemaRef
               readReq_OptionsFilterOptionNoFilter <- declare_no_filter
                                                        Proxy.Proxy
               let _ = Hs.pure ReadReq_OptionsFilterOptionNoFilter <*>
                         HsJSONPB.asProxy declare_no_filter
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadReq_OptionsFilterOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("filter",
                                                         readReq_OptionsFilterOptionFilter),
                                                        ("no_filter",
                                                         readReq_OptionsFilterOptionNoFilter)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ReadResp = ReadResp{readRespContent ::
                            Hs.Maybe ReadRespContent}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp where
        nameOf _ = (Hs.fromString "ReadResp")
 
instance HsProtobuf.HasDefault ReadResp
 
instance HsProtobuf.Message ReadResp where
        encodeMessage _ ReadResp{readRespContent = readRespContent}
          = (Hs.mconcat
               [case readRespContent of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadRespContentEvent y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.ReadResp_ReadEvent)
                                        @(HsProtobuf.Nested Streams.ReadResp_ReadEvent)
                                        (Hs.Just y)))
                             ReadRespContentConfirmation y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce
                                        @(Hs.Maybe Streams.ReadResp_SubscriptionConfirmation)
                                        @(HsProtobuf.Nested Streams.ReadResp_SubscriptionConfirmation)
                                        (Hs.Just y)))
                             ReadRespContentCheckpoint y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Streams.ReadResp_Checkpoint)
                                        @(HsProtobuf.Nested Streams.ReadResp_Checkpoint)
                                        (Hs.Just y)))
                             ReadRespContentStreamNotFound y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Streams.ReadResp_StreamNotFound)
                                        @(HsProtobuf.Nested Streams.ReadResp_StreamNotFound)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ReadResp) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ReadRespContentEvent)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadResp_ReadEvent))
                        @(_ (Hs.Maybe Streams.ReadResp_ReadEvent))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ReadRespContentConfirmation)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.ReadResp_SubscriptionConfirmation))
                        @(_ (Hs.Maybe Streams.ReadResp_SubscriptionConfirmation))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap ReadRespContentCheckpoint)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadResp_Checkpoint))
                        @(_ (Hs.Maybe Streams.ReadResp_Checkpoint))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ReadRespContentStreamNotFound)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadResp_StreamNotFound))
                        @(_ (Hs.Maybe Streams.ReadResp_StreamNotFound))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ReadResp where
        toJSONPB (ReadResp f1_or_f2_or_f3_or_f4)
          = (HsJSONPB.object
               [(let encodeContent
                       = (case f1_or_f2_or_f3_or_f4 of
                              Hs.Just (ReadRespContentEvent f1) -> (HsJSONPB.pair "event" f1)
                              Hs.Just (ReadRespContentConfirmation f2)
                                -> (HsJSONPB.pair "confirmation" f2)
                              Hs.Just (ReadRespContentCheckpoint f3)
                                -> (HsJSONPB.pair "checkpoint" f3)
                              Hs.Just (ReadRespContentStreamNotFound f4)
                                -> (HsJSONPB.pair "stream_not_found" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.objectOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
        toEncodingPB (ReadResp f1_or_f2_or_f3_or_f4)
          = (HsJSONPB.pairs
               [(let encodeContent
                       = (case f1_or_f2_or_f3_or_f4 of
                              Hs.Just (ReadRespContentEvent f1) -> (HsJSONPB.pair "event" f1)
                              Hs.Just (ReadRespContentConfirmation f2)
                                -> (HsJSONPB.pair "confirmation" f2)
                              Hs.Just (ReadRespContentCheckpoint f3)
                                -> (HsJSONPB.pair "checkpoint" f3)
                              Hs.Just (ReadRespContentStreamNotFound f4)
                                -> (HsJSONPB.pair "stream_not_found" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.pairsOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
 
instance HsJSONPB.FromJSONPB ReadResp where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp"
               (\ obj ->
                  (Hs.pure ReadResp) <*>
                    (let parseContent parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadRespContentEvent <$>
                                  (HsJSONPB.parseField parseObj "event"),
                                Hs.Just Hs.. ReadRespContentConfirmation <$>
                                  (HsJSONPB.parseField parseObj "confirmation"),
                                Hs.Just Hs.. ReadRespContentCheckpoint <$>
                                  (HsJSONPB.parseField parseObj "checkpoint"),
                                Hs.Just Hs.. ReadRespContentStreamNotFound <$>
                                  (HsJSONPB.parseField parseObj "stream_not_found"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "content") Hs.>>=
                          (HsJSONPB.withObject "content" parseContent))
                         <|> (parseContent obj))))
 
instance HsJSONPB.ToJSON ReadResp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp where
        declareNamedSchema _
          = do let declare_content = HsJSONPB.declareSchemaRef
               readRespContent <- declare_content Proxy.Proxy
               let _ = Hs.pure ReadResp <*> HsJSONPB.asProxy declare_content
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("content", readRespContent)]}})
 
data ReadResp_ReadEvent = ReadResp_ReadEvent{readResp_ReadEventEvent
                                             :: Hs.Maybe Streams.ReadEvent_RecordedEvent,
                                             readResp_ReadEventLink ::
                                             Hs.Maybe Streams.ReadEvent_RecordedEvent,
                                             readResp_ReadEventPosition ::
                                             Hs.Maybe ReadResp_ReadEventPosition}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_ReadEvent where
        nameOf _ = (Hs.fromString "ReadResp_ReadEvent")
 
instance HsProtobuf.HasDefault ReadResp_ReadEvent
 
instance HsProtobuf.Message ReadResp_ReadEvent where
        encodeMessage _
          ReadResp_ReadEvent{readResp_ReadEventEvent =
                               readResp_ReadEventEvent,
                             readResp_ReadEventLink = readResp_ReadEventLink,
                             readResp_ReadEventPosition = readResp_ReadEventPosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Streams.ReadEvent_RecordedEvent)
                      @(HsProtobuf.Nested Streams.ReadEvent_RecordedEvent)
                      readResp_ReadEventEvent)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Streams.ReadEvent_RecordedEvent)
                      @(HsProtobuf.Nested Streams.ReadEvent_RecordedEvent)
                      readResp_ReadEventLink)),
                case readResp_ReadEventPosition of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ReadResp_ReadEventPositionCommitPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             ReadResp_ReadEventPositionNoPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ReadResp_ReadEvent) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadEvent_RecordedEvent))
                 @(_ (Hs.Maybe Streams.ReadEvent_RecordedEvent))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.ReadEvent_RecordedEvent))
                 @(_ (Hs.Maybe Streams.ReadEvent_RecordedEvent))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. ReadResp_ReadEventPositionCommitPosition))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ReadResp_ReadEventPositionNoPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "RecordedEvent")))
                (HsProtobuf.Single "event")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "RecordedEvent")))
                (HsProtobuf.Single "link")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadResp_ReadEvent where
        toJSONPB (ReadResp_ReadEvent f1 f2 f3_or_f4)
          = (HsJSONPB.object
               ["event" .= f1, "link" .= f2,
                (let encodePosition
                       = (case f3_or_f4 of
                              Hs.Just (ReadResp_ReadEventPositionCommitPosition f3)
                                -> (HsJSONPB.pair "commit_position" f3)
                              Hs.Just (ReadResp_ReadEventPositionNoPosition f4)
                                -> (HsJSONPB.pair "no_position" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position" .= (HsJSONPB.objectOrNull [encodePosition] options))
                         options
                       else encodePosition options)])
        toEncodingPB (ReadResp_ReadEvent f1 f2 f3_or_f4)
          = (HsJSONPB.pairs
               ["event" .= f1, "link" .= f2,
                (let encodePosition
                       = (case f3_or_f4 of
                              Hs.Just (ReadResp_ReadEventPositionCommitPosition f3)
                                -> (HsJSONPB.pair "commit_position" f3)
                              Hs.Just (ReadResp_ReadEventPositionNoPosition f4)
                                -> (HsJSONPB.pair "no_position" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position" .= (HsJSONPB.pairsOrNull [encodePosition] options))
                         options
                       else encodePosition options)])
 
instance HsJSONPB.FromJSONPB ReadResp_ReadEvent where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp_ReadEvent"
               (\ obj ->
                  (Hs.pure ReadResp_ReadEvent) <*> obj .: "event" <*> obj .: "link"
                    <*>
                    (let parsePosition parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ReadResp_ReadEventPositionCommitPosition <$>
                                  (HsJSONPB.parseField parseObj "commit_position"),
                                Hs.Just Hs.. ReadResp_ReadEventPositionNoPosition <$>
                                  (HsJSONPB.parseField parseObj "no_position"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "position") Hs.>>=
                          (HsJSONPB.withObject "position" parsePosition))
                         <|> (parsePosition obj))))
 
instance HsJSONPB.ToJSON ReadResp_ReadEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp_ReadEvent where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp_ReadEvent where
        declareNamedSchema _
          = do let declare_event = HsJSONPB.declareSchemaRef
               readResp_ReadEventEvent <- declare_event Proxy.Proxy
               let declare_link = HsJSONPB.declareSchemaRef
               readResp_ReadEventLink <- declare_link Proxy.Proxy
               let declare_position = HsJSONPB.declareSchemaRef
               readResp_ReadEventPosition <- declare_position Proxy.Proxy
               let _ = Hs.pure ReadResp_ReadEvent <*>
                         HsJSONPB.asProxy declare_event
                         <*> HsJSONPB.asProxy declare_link
                         <*> HsJSONPB.asProxy declare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_ReadEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("event", readResp_ReadEventEvent),
                                                        ("link", readResp_ReadEventLink),
                                                        ("position", readResp_ReadEventPosition)]}})
 
data ReadResp_ReadEvent_RecordedEvent = ReadResp_ReadEvent_RecordedEvent{readResp_ReadEvent_RecordedEventId
                                                                         :: Hs.Maybe Shared.UUID,
                                                                         readResp_ReadEvent_RecordedEventStreamIdentifier
                                                                         ::
                                                                         Hs.Maybe
                                                                           Shared.StreamIdentifier,
                                                                         readResp_ReadEvent_RecordedEventStreamRevision
                                                                         :: Hs.Word64,
                                                                         readResp_ReadEvent_RecordedEventPreparePosition
                                                                         :: Hs.Word64,
                                                                         readResp_ReadEvent_RecordedEventCommitPosition
                                                                         :: Hs.Word64,
                                                                         readResp_ReadEvent_RecordedEventMetadata
                                                                         :: Hs.Map Hs.Text Hs.Text,
                                                                         readResp_ReadEvent_RecordedEventCustomMetadata
                                                                         :: Hs.ByteString,
                                                                         readResp_ReadEvent_RecordedEventData
                                                                         :: Hs.ByteString}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_ReadEvent_RecordedEvent where
        nameOf _ = (Hs.fromString "ReadResp_ReadEvent_RecordedEvent")
 
instance HsProtobuf.HasDefault ReadResp_ReadEvent_RecordedEvent
 
instance HsProtobuf.Message ReadResp_ReadEvent_RecordedEvent where
        encodeMessage _
          ReadResp_ReadEvent_RecordedEvent{readResp_ReadEvent_RecordedEventId
                                             = readResp_ReadEvent_RecordedEventId,
                                           readResp_ReadEvent_RecordedEventStreamIdentifier =
                                             readResp_ReadEvent_RecordedEventStreamIdentifier,
                                           readResp_ReadEvent_RecordedEventStreamRevision =
                                             readResp_ReadEvent_RecordedEventStreamRevision,
                                           readResp_ReadEvent_RecordedEventPreparePosition =
                                             readResp_ReadEvent_RecordedEventPreparePosition,
                                           readResp_ReadEvent_RecordedEventCommitPosition =
                                             readResp_ReadEvent_RecordedEventCommitPosition,
                                           readResp_ReadEvent_RecordedEventMetadata =
                                             readResp_ReadEvent_RecordedEventMetadata,
                                           readResp_ReadEvent_RecordedEventCustomMetadata =
                                             readResp_ReadEvent_RecordedEventCustomMetadata,
                                           readResp_ReadEvent_RecordedEventData =
                                             readResp_ReadEvent_RecordedEventData}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.UUID) @(HsProtobuf.Nested Shared.UUID)
                      readResp_ReadEvent_RecordedEventId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      readResp_ReadEvent_RecordedEventStreamIdentifier)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   readResp_ReadEvent_RecordedEventStreamRevision),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   readResp_ReadEvent_RecordedEventPreparePosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   readResp_ReadEvent_RecordedEventCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   readResp_ReadEvent_RecordedEventMetadata),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   readResp_ReadEvent_RecordedEventCustomMetadata),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   readResp_ReadEvent_RecordedEventData)])
        decodeMessage _
          = (Hs.pure ReadResp_ReadEvent_RecordedEvent) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.UUID))
                 @(_ (Hs.Maybe Shared.UUID))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 8))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "UUID"])))))
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "stream_revision")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.String)
                (HsProtobuf.Single "metadata")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "custom_metadata")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "data")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadResp_ReadEvent_RecordedEvent where
        toJSONPB (ReadResp_ReadEvent_RecordedEvent f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.object
               ["id" .= f1, "stream_identifier" .= f2, "stream_revision" .= f3,
                "prepare_position" .= f4, "commit_position" .= f5,
                "metadata" .= f6, "custom_metadata" .= f7, "data" .= f8])
        toEncodingPB
          (ReadResp_ReadEvent_RecordedEvent f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.pairs
               ["id" .= f1, "stream_identifier" .= f2, "stream_revision" .= f3,
                "prepare_position" .= f4, "commit_position" .= f5,
                "metadata" .= f6, "custom_metadata" .= f7, "data" .= f8])
 
instance HsJSONPB.FromJSONPB ReadResp_ReadEvent_RecordedEvent where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp_ReadEvent_RecordedEvent"
               (\ obj ->
                  (Hs.pure ReadResp_ReadEvent_RecordedEvent) <*> obj .: "id" <*>
                    obj .: "stream_identifier"
                    <*> obj .: "stream_revision"
                    <*> obj .: "prepare_position"
                    <*> obj .: "commit_position"
                    <*> obj .: "metadata"
                    <*> obj .: "custom_metadata"
                    <*> obj .: "data"))
 
instance HsJSONPB.ToJSON ReadResp_ReadEvent_RecordedEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp_ReadEvent_RecordedEvent where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp_ReadEvent_RecordedEvent where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventId <- declare_id Proxy.Proxy
               let declare_stream_identifier = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventStreamIdentifier <- declare_stream_identifier
                                                                     Proxy.Proxy
               let declare_stream_revision = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventStreamRevision <- declare_stream_revision
                                                                   Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventPreparePosition <- declare_prepare_position
                                                                    Proxy.Proxy
               let declare_commit_position = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventCommitPosition <- declare_commit_position
                                                                   Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventMetadata <- declare_metadata
                                                             Proxy.Proxy
               let declare_custom_metadata = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventCustomMetadata <- declare_custom_metadata
                                                                   Proxy.Proxy
               let declare_data = HsJSONPB.declareSchemaRef
               readResp_ReadEvent_RecordedEventData <- declare_data Proxy.Proxy
               let _ = Hs.pure ReadResp_ReadEvent_RecordedEvent <*>
                         HsJSONPB.asProxy declare_id
                         <*> HsJSONPB.asProxy declare_stream_identifier
                         <*> HsJSONPB.asProxy declare_stream_revision
                         <*> HsJSONPB.asProxy declare_prepare_position
                         <*> HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_metadata
                         <*> HsJSONPB.asProxy declare_custom_metadata
                         <*> HsJSONPB.asProxy declare_data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_ReadEvent_RecordedEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", readResp_ReadEvent_RecordedEventId),
                                                        ("stream_identifier",
                                                         readResp_ReadEvent_RecordedEventStreamIdentifier),
                                                        ("stream_revision",
                                                         readResp_ReadEvent_RecordedEventStreamRevision),
                                                        ("prepare_position",
                                                         readResp_ReadEvent_RecordedEventPreparePosition),
                                                        ("commit_position",
                                                         readResp_ReadEvent_RecordedEventCommitPosition),
                                                        ("metadata",
                                                         readResp_ReadEvent_RecordedEventMetadata),
                                                        ("custom_metadata",
                                                         readResp_ReadEvent_RecordedEventCustomMetadata),
                                                        ("data",
                                                         readResp_ReadEvent_RecordedEventData)]}})
 
data ReadResp_ReadEventPosition = ReadResp_ReadEventPositionCommitPosition Hs.Word64
                                | ReadResp_ReadEventPositionNoPosition Shared.Empty
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_ReadEventPosition where
        nameOf _ = (Hs.fromString "ReadResp_ReadEventPosition")
 
instance HsJSONPB.ToSchema ReadResp_ReadEventPosition where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               readResp_ReadEventPositionCommitPosition <- declare_commit_position
                                                             Proxy.Proxy
               let _ = Hs.pure ReadResp_ReadEventPositionCommitPosition <*>
                         HsJSONPB.asProxy declare_commit_position
               let declare_no_position = HsJSONPB.declareSchemaRef
               readResp_ReadEventPositionNoPosition <- declare_no_position
                                                         Proxy.Proxy
               let _ = Hs.pure ReadResp_ReadEventPositionNoPosition <*>
                         HsJSONPB.asProxy declare_no_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_ReadEventPosition",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         readResp_ReadEventPositionCommitPosition),
                                                        ("no_position",
                                                         readResp_ReadEventPositionNoPosition)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ReadResp_SubscriptionConfirmation = ReadResp_SubscriptionConfirmation{readResp_SubscriptionConfirmationSubscriptionId
                                                                              :: Hs.Text}
                                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_SubscriptionConfirmation where
        nameOf _ = (Hs.fromString "ReadResp_SubscriptionConfirmation")
 
instance HsProtobuf.HasDefault ReadResp_SubscriptionConfirmation
 
instance HsProtobuf.Message ReadResp_SubscriptionConfirmation where
        encodeMessage _
          ReadResp_SubscriptionConfirmation{readResp_SubscriptionConfirmationSubscriptionId
                                              = readResp_SubscriptionConfirmationSubscriptionId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   readResp_SubscriptionConfirmationSubscriptionId)])
        decodeMessage _
          = (Hs.pure ReadResp_SubscriptionConfirmation) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "subscription_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadResp_SubscriptionConfirmation where
        toJSONPB (ReadResp_SubscriptionConfirmation f1)
          = (HsJSONPB.object ["subscription_id" .= f1])
        toEncodingPB (ReadResp_SubscriptionConfirmation f1)
          = (HsJSONPB.pairs ["subscription_id" .= f1])
 
instance HsJSONPB.FromJSONPB ReadResp_SubscriptionConfirmation
         where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp_SubscriptionConfirmation"
               (\ obj ->
                  (Hs.pure ReadResp_SubscriptionConfirmation) <*>
                    obj .: "subscription_id"))
 
instance HsJSONPB.ToJSON ReadResp_SubscriptionConfirmation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp_SubscriptionConfirmation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp_SubscriptionConfirmation where
        declareNamedSchema _
          = do let declare_subscription_id = HsJSONPB.declareSchemaRef
               readResp_SubscriptionConfirmationSubscriptionId <- declare_subscription_id
                                                                    Proxy.Proxy
               let _ = Hs.pure ReadResp_SubscriptionConfirmation <*>
                         HsJSONPB.asProxy declare_subscription_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_SubscriptionConfirmation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("subscription_id",
                                                         readResp_SubscriptionConfirmationSubscriptionId)]}})
 
data ReadResp_Checkpoint = ReadResp_Checkpoint{readResp_CheckpointCommitPosition
                                               :: Hs.Word64,
                                               readResp_CheckpointPreparePosition :: Hs.Word64}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_Checkpoint where
        nameOf _ = (Hs.fromString "ReadResp_Checkpoint")
 
instance HsProtobuf.HasDefault ReadResp_Checkpoint
 
instance HsProtobuf.Message ReadResp_Checkpoint where
        encodeMessage _
          ReadResp_Checkpoint{readResp_CheckpointCommitPosition =
                                readResp_CheckpointCommitPosition,
                              readResp_CheckpointPreparePosition =
                                readResp_CheckpointPreparePosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   readResp_CheckpointCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   readResp_CheckpointPreparePosition)])
        decodeMessage _
          = (Hs.pure ReadResp_Checkpoint) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadResp_Checkpoint where
        toJSONPB (ReadResp_Checkpoint f1 f2)
          = (HsJSONPB.object
               ["commit_position" .= f1, "prepare_position" .= f2])
        toEncodingPB (ReadResp_Checkpoint f1 f2)
          = (HsJSONPB.pairs
               ["commit_position" .= f1, "prepare_position" .= f2])
 
instance HsJSONPB.FromJSONPB ReadResp_Checkpoint where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp_Checkpoint"
               (\ obj ->
                  (Hs.pure ReadResp_Checkpoint) <*> obj .: "commit_position" <*>
                    obj .: "prepare_position"))
 
instance HsJSONPB.ToJSON ReadResp_Checkpoint where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp_Checkpoint where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp_Checkpoint where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               readResp_CheckpointCommitPosition <- declare_commit_position
                                                      Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               readResp_CheckpointPreparePosition <- declare_prepare_position
                                                       Proxy.Proxy
               let _ = Hs.pure ReadResp_Checkpoint <*>
                         HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_prepare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_Checkpoint",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         readResp_CheckpointCommitPosition),
                                                        ("prepare_position",
                                                         readResp_CheckpointPreparePosition)]}})
 
newtype ReadResp_StreamNotFound = ReadResp_StreamNotFound{readResp_StreamNotFoundStreamIdentifier
                                                          :: Hs.Maybe Shared.StreamIdentifier}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadResp_StreamNotFound where
        nameOf _ = (Hs.fromString "ReadResp_StreamNotFound")
 
instance HsProtobuf.HasDefault ReadResp_StreamNotFound
 
instance HsProtobuf.Message ReadResp_StreamNotFound where
        encodeMessage _
          ReadResp_StreamNotFound{readResp_StreamNotFoundStreamIdentifier =
                                    readResp_StreamNotFoundStreamIdentifier}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      readResp_StreamNotFoundStreamIdentifier))])
        decodeMessage _
          = (Hs.pure ReadResp_StreamNotFound) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ReadResp_StreamNotFound where
        toJSONPB (ReadResp_StreamNotFound f1)
          = (HsJSONPB.object ["stream_identifier" .= f1])
        toEncodingPB (ReadResp_StreamNotFound f1)
          = (HsJSONPB.pairs ["stream_identifier" .= f1])
 
instance HsJSONPB.FromJSONPB ReadResp_StreamNotFound where
        parseJSONPB
          = (HsJSONPB.withObject "ReadResp_StreamNotFound"
               (\ obj ->
                  (Hs.pure ReadResp_StreamNotFound) <*> obj .: "stream_identifier"))
 
instance HsJSONPB.ToJSON ReadResp_StreamNotFound where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ReadResp_StreamNotFound where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ReadResp_StreamNotFound where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               readResp_StreamNotFoundStreamIdentifier <- declare_stream_identifier
                                                            Proxy.Proxy
               let _ = Hs.pure ReadResp_StreamNotFound <*>
                         HsJSONPB.asProxy declare_stream_identifier
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadResp_StreamNotFound",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         readResp_StreamNotFoundStreamIdentifier)]}})
 
data ReadRespContent = ReadRespContentEvent Streams.ReadResp_ReadEvent
                     | ReadRespContentConfirmation Streams.ReadResp_SubscriptionConfirmation
                     | ReadRespContentCheckpoint Streams.ReadResp_Checkpoint
                     | ReadRespContentStreamNotFound Streams.ReadResp_StreamNotFound
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ReadRespContent where
        nameOf _ = (Hs.fromString "ReadRespContent")
 
instance HsJSONPB.ToSchema ReadRespContent where
        declareNamedSchema _
          = do let declare_event = HsJSONPB.declareSchemaRef
               readRespContentEvent <- declare_event Proxy.Proxy
               let _ = Hs.pure ReadRespContentEvent <*>
                         HsJSONPB.asProxy declare_event
               let declare_confirmation = HsJSONPB.declareSchemaRef
               readRespContentConfirmation <- declare_confirmation Proxy.Proxy
               let _ = Hs.pure ReadRespContentConfirmation <*>
                         HsJSONPB.asProxy declare_confirmation
               let declare_checkpoint = HsJSONPB.declareSchemaRef
               readRespContentCheckpoint <- declare_checkpoint Proxy.Proxy
               let _ = Hs.pure ReadRespContentCheckpoint <*>
                         HsJSONPB.asProxy declare_checkpoint
               let declare_stream_not_found = HsJSONPB.declareSchemaRef
               readRespContentStreamNotFound <- declare_stream_not_found
                                                  Proxy.Proxy
               let _ = Hs.pure ReadRespContentStreamNotFound <*>
                         HsJSONPB.asProxy declare_stream_not_found
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ReadRespContent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("event", readRespContentEvent),
                                                        ("confirmation",
                                                         readRespContentConfirmation),
                                                        ("checkpoint", readRespContentCheckpoint),
                                                        ("stream_not_found",
                                                         readRespContentStreamNotFound)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype AppendReq = AppendReq{appendReqContent ::
                              Hs.Maybe AppendReqContent}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendReq where
        nameOf _ = (Hs.fromString "AppendReq")
 
instance HsProtobuf.HasDefault AppendReq
 
instance HsProtobuf.Message AppendReq where
        encodeMessage _ AppendReq{appendReqContent = appendReqContent}
          = (Hs.mconcat
               [case appendReqContent of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendReqContentOptions y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.AppendReq_Options)
                                        @(HsProtobuf.Nested Streams.AppendReq_Options)
                                        (Hs.Just y)))
                             AppendReqContentProposedMessage y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Streams.AppendReq_ProposedMessage)
                                        @(HsProtobuf.Nested Streams.AppendReq_ProposedMessage)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AppendReq) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap AppendReqContentOptions)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.AppendReq_Options))
                        @(_ (Hs.Maybe Streams.AppendReq_Options))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap AppendReqContentProposedMessage)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.AppendReq_ProposedMessage))
                        @(_ (Hs.Maybe Streams.AppendReq_ProposedMessage))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AppendReq where
        toJSONPB (AppendReq f1_or_f2)
          = (HsJSONPB.object
               [(let encodeContent
                       = (case f1_or_f2 of
                              Hs.Just (AppendReqContentOptions f1)
                                -> (HsJSONPB.pair "options" f1)
                              Hs.Just (AppendReqContentProposedMessage f2)
                                -> (HsJSONPB.pair "proposed_message" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.objectOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
        toEncodingPB (AppendReq f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeContent
                       = (case f1_or_f2 of
                              Hs.Just (AppendReqContentOptions f1)
                                -> (HsJSONPB.pair "options" f1)
                              Hs.Just (AppendReqContentProposedMessage f2)
                                -> (HsJSONPB.pair "proposed_message" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("content" .= (HsJSONPB.pairsOrNull [encodeContent] options))
                         options
                       else encodeContent options)])
 
instance HsJSONPB.FromJSONPB AppendReq where
        parseJSONPB
          = (HsJSONPB.withObject "AppendReq"
               (\ obj ->
                  (Hs.pure AppendReq) <*>
                    (let parseContent parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AppendReqContentOptions <$>
                                  (HsJSONPB.parseField parseObj "options"),
                                Hs.Just Hs.. AppendReqContentProposedMessage <$>
                                  (HsJSONPB.parseField parseObj "proposed_message"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "content") Hs.>>=
                          (HsJSONPB.withObject "content" parseContent))
                         <|> (parseContent obj))))
 
instance HsJSONPB.ToJSON AppendReq where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendReq where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendReq where
        declareNamedSchema _
          = do let declare_content = HsJSONPB.declareSchemaRef
               appendReqContent <- declare_content Proxy.Proxy
               let _ = Hs.pure AppendReq <*> HsJSONPB.asProxy declare_content
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("content", appendReqContent)]}})
 
data AppendReq_Options = AppendReq_Options{appendReq_OptionsStreamIdentifier
                                           :: Hs.Maybe Shared.StreamIdentifier,
                                           appendReq_OptionsExpectedStreamRevision ::
                                           Hs.Maybe AppendReq_OptionsExpectedStreamRevision}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendReq_Options where
        nameOf _ = (Hs.fromString "AppendReq_Options")
 
instance HsProtobuf.HasDefault AppendReq_Options
 
instance HsProtobuf.Message AppendReq_Options where
        encodeMessage _
          AppendReq_Options{appendReq_OptionsStreamIdentifier =
                              appendReq_OptionsStreamIdentifier,
                            appendReq_OptionsExpectedStreamRevision =
                              appendReq_OptionsExpectedStreamRevision}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      appendReq_OptionsStreamIdentifier)),
                case appendReq_OptionsExpectedStreamRevision of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendReq_OptionsExpectedStreamRevisionRevision y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             AppendReq_OptionsExpectedStreamRevisionNoStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             AppendReq_OptionsExpectedStreamRevisionAny y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             AppendReq_OptionsExpectedStreamRevisionStreamExists y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AppendReq_Options) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.Just Hs.. AppendReq_OptionsExpectedStreamRevisionRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap AppendReq_OptionsExpectedStreamRevisionNoStream))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap AppendReq_OptionsExpectedStreamRevisionAny)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure
                      (Hs.fmap AppendReq_OptionsExpectedStreamRevisionStreamExists))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AppendReq_Options where
        toJSONPB (AppendReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.objectOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
        toEncodingPB (AppendReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (AppendReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.pairsOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
 
instance HsJSONPB.FromJSONPB AppendReq_Options where
        parseJSONPB
          = (HsJSONPB.withObject "AppendReq_Options"
               (\ obj ->
                  (Hs.pure AppendReq_Options) <*> obj .: "stream_identifier" <*>
                    (let parseExpected_stream_revision parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AppendReq_OptionsExpectedStreamRevisionRevision <$>
                                  (HsJSONPB.parseField parseObj "revision"),
                                Hs.Just Hs.. AppendReq_OptionsExpectedStreamRevisionNoStream <$>
                                  (HsJSONPB.parseField parseObj "no_stream"),
                                Hs.Just Hs.. AppendReq_OptionsExpectedStreamRevisionAny <$>
                                  (HsJSONPB.parseField parseObj "any"),
                                Hs.Just Hs.. AppendReq_OptionsExpectedStreamRevisionStreamExists
                                  <$> (HsJSONPB.parseField parseObj "stream_exists"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "expected_stream_revision") Hs.>>=
                          (HsJSONPB.withObject "expected_stream_revision"
                             parseExpected_stream_revision))
                         <|> (parseExpected_stream_revision obj))))
 
instance HsJSONPB.ToJSON AppendReq_Options where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendReq_Options where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendReq_Options where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               appendReq_OptionsStreamIdentifier <- declare_stream_identifier
                                                      Proxy.Proxy
               let declare_expected_stream_revision = HsJSONPB.declareSchemaRef
               appendReq_OptionsExpectedStreamRevision <- declare_expected_stream_revision
                                                            Proxy.Proxy
               let _ = Hs.pure AppendReq_Options <*>
                         HsJSONPB.asProxy declare_stream_identifier
                         <*> HsJSONPB.asProxy declare_expected_stream_revision
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendReq_Options",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         appendReq_OptionsStreamIdentifier),
                                                        ("expected_stream_revision",
                                                         appendReq_OptionsExpectedStreamRevision)]}})
 
data AppendReq_OptionsExpectedStreamRevision = AppendReq_OptionsExpectedStreamRevisionRevision Hs.Word64
                                             | AppendReq_OptionsExpectedStreamRevisionNoStream Shared.Empty
                                             | AppendReq_OptionsExpectedStreamRevisionAny Shared.Empty
                                             | AppendReq_OptionsExpectedStreamRevisionStreamExists Shared.Empty
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named AppendReq_OptionsExpectedStreamRevision
         where
        nameOf _
          = (Hs.fromString "AppendReq_OptionsExpectedStreamRevision")
 
instance HsJSONPB.ToSchema AppendReq_OptionsExpectedStreamRevision
         where
        declareNamedSchema _
          = do let declare_revision = HsJSONPB.declareSchemaRef
               appendReq_OptionsExpectedStreamRevisionRevision <- declare_revision
                                                                    Proxy.Proxy
               let _ = Hs.pure AppendReq_OptionsExpectedStreamRevisionRevision <*>
                         HsJSONPB.asProxy declare_revision
               let declare_no_stream = HsJSONPB.declareSchemaRef
               appendReq_OptionsExpectedStreamRevisionNoStream <- declare_no_stream
                                                                    Proxy.Proxy
               let _ = Hs.pure AppendReq_OptionsExpectedStreamRevisionNoStream <*>
                         HsJSONPB.asProxy declare_no_stream
               let declare_any = HsJSONPB.declareSchemaRef
               appendReq_OptionsExpectedStreamRevisionAny <- declare_any
                                                               Proxy.Proxy
               let _ = Hs.pure AppendReq_OptionsExpectedStreamRevisionAny <*>
                         HsJSONPB.asProxy declare_any
               let declare_stream_exists = HsJSONPB.declareSchemaRef
               appendReq_OptionsExpectedStreamRevisionStreamExists <- declare_stream_exists
                                                                        Proxy.Proxy
               let _ = Hs.pure AppendReq_OptionsExpectedStreamRevisionStreamExists
                         <*> HsJSONPB.asProxy declare_stream_exists
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendReq_OptionsExpectedStreamRevision",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("revision",
                                                         appendReq_OptionsExpectedStreamRevisionRevision),
                                                        ("no_stream",
                                                         appendReq_OptionsExpectedStreamRevisionNoStream),
                                                        ("any",
                                                         appendReq_OptionsExpectedStreamRevisionAny),
                                                        ("stream_exists",
                                                         appendReq_OptionsExpectedStreamRevisionStreamExists)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AppendReq_ProposedMessage = AppendReq_ProposedMessage{appendReq_ProposedMessageId
                                                           :: Hs.Maybe Shared.UUID,
                                                           appendReq_ProposedMessageMetadata ::
                                                           Hs.Map Hs.Text Hs.Text,
                                                           appendReq_ProposedMessageCustomMetadata
                                                           :: Hs.ByteString,
                                                           appendReq_ProposedMessageData ::
                                                           Hs.ByteString}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendReq_ProposedMessage where
        nameOf _ = (Hs.fromString "AppendReq_ProposedMessage")
 
instance HsProtobuf.HasDefault AppendReq_ProposedMessage
 
instance HsProtobuf.Message AppendReq_ProposedMessage where
        encodeMessage _
          AppendReq_ProposedMessage{appendReq_ProposedMessageId =
                                      appendReq_ProposedMessageId,
                                    appendReq_ProposedMessageMetadata =
                                      appendReq_ProposedMessageMetadata,
                                    appendReq_ProposedMessageCustomMetadata =
                                      appendReq_ProposedMessageCustomMetadata,
                                    appendReq_ProposedMessageData = appendReq_ProposedMessageData}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.UUID) @(HsProtobuf.Nested Shared.UUID)
                      appendReq_ProposedMessageId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   appendReq_ProposedMessageMetadata),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   appendReq_ProposedMessageCustomMetadata),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   appendReq_ProposedMessageData)])
        decodeMessage _
          = (Hs.pure AppendReq_ProposedMessage) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.UUID))
                 @(_ (Hs.Maybe Shared.UUID))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "UUID"])))))
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.String)
                (HsProtobuf.Single "metadata")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "custom_metadata")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "data")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AppendReq_ProposedMessage where
        toJSONPB (AppendReq_ProposedMessage f1 f2 f3 f4)
          = (HsJSONPB.object
               ["id" .= f1, "metadata" .= f2, "custom_metadata" .= f3,
                "data" .= f4])
        toEncodingPB (AppendReq_ProposedMessage f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["id" .= f1, "metadata" .= f2, "custom_metadata" .= f3,
                "data" .= f4])
 
instance HsJSONPB.FromJSONPB AppendReq_ProposedMessage where
        parseJSONPB
          = (HsJSONPB.withObject "AppendReq_ProposedMessage"
               (\ obj ->
                  (Hs.pure AppendReq_ProposedMessage) <*> obj .: "id" <*>
                    obj .: "metadata"
                    <*> obj .: "custom_metadata"
                    <*> obj .: "data"))
 
instance HsJSONPB.ToJSON AppendReq_ProposedMessage where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendReq_ProposedMessage where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendReq_ProposedMessage where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               appendReq_ProposedMessageId <- declare_id Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               appendReq_ProposedMessageMetadata <- declare_metadata Proxy.Proxy
               let declare_custom_metadata = HsJSONPB.declareSchemaRef
               appendReq_ProposedMessageCustomMetadata <- declare_custom_metadata
                                                            Proxy.Proxy
               let declare_data = HsJSONPB.declareSchemaRef
               appendReq_ProposedMessageData <- declare_data Proxy.Proxy
               let _ = Hs.pure AppendReq_ProposedMessage <*>
                         HsJSONPB.asProxy declare_id
                         <*> HsJSONPB.asProxy declare_metadata
                         <*> HsJSONPB.asProxy declare_custom_metadata
                         <*> HsJSONPB.asProxy declare_data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendReq_ProposedMessage",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", appendReq_ProposedMessageId),
                                                        ("metadata",
                                                         appendReq_ProposedMessageMetadata),
                                                        ("custom_metadata",
                                                         appendReq_ProposedMessageCustomMetadata),
                                                        ("data", appendReq_ProposedMessageData)]}})
 
data AppendReqContent = AppendReqContentOptions Streams.AppendReq_Options
                      | AppendReqContentProposedMessage Streams.AppendReq_ProposedMessage
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendReqContent where
        nameOf _ = (Hs.fromString "AppendReqContent")
 
instance HsJSONPB.ToSchema AppendReqContent where
        declareNamedSchema _
          = do let declare_options = HsJSONPB.declareSchemaRef
               appendReqContentOptions <- declare_options Proxy.Proxy
               let _ = Hs.pure AppendReqContentOptions <*>
                         HsJSONPB.asProxy declare_options
               let declare_proposed_message = HsJSONPB.declareSchemaRef
               appendReqContentProposedMessage <- declare_proposed_message
                                                    Proxy.Proxy
               let _ = Hs.pure AppendReqContentProposedMessage <*>
                         HsJSONPB.asProxy declare_proposed_message
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendReqContent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("options", appendReqContentOptions),
                                                        ("proposed_message",
                                                         appendReqContentProposedMessage)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype AppendResp = AppendResp{appendRespResult ::
                                Hs.Maybe AppendRespResult}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendResp where
        nameOf _ = (Hs.fromString "AppendResp")
 
instance HsProtobuf.HasDefault AppendResp
 
instance HsProtobuf.Message AppendResp where
        encodeMessage _ AppendResp{appendRespResult = appendRespResult}
          = (Hs.mconcat
               [case appendRespResult of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendRespResultSuccess y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.AppendResp_Success)
                                        @(HsProtobuf.Nested Streams.AppendResp_Success)
                                        (Hs.Just y)))
                             AppendRespResultWrongExpectedVersion y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Streams.AppendResp_WrongExpectedVersion)
                                        @(HsProtobuf.Nested Streams.AppendResp_WrongExpectedVersion)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AppendResp) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap AppendRespResultSuccess)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.AppendResp_Success))
                        @(_ (Hs.Maybe Streams.AppendResp_Success))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap AppendRespResultWrongExpectedVersion)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Streams.AppendResp_WrongExpectedVersion))
                        @(_ (Hs.Maybe Streams.AppendResp_WrongExpectedVersion))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AppendResp where
        toJSONPB (AppendResp f1_or_f2)
          = (HsJSONPB.object
               [(let encodeResult
                       = (case f1_or_f2 of
                              Hs.Just (AppendRespResultSuccess f1)
                                -> (HsJSONPB.pair "success" f1)
                              Hs.Just (AppendRespResultWrongExpectedVersion f2)
                                -> (HsJSONPB.pair "wrong_expected_version" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                         options
                       else encodeResult options)])
        toEncodingPB (AppendResp f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeResult
                       = (case f1_or_f2 of
                              Hs.Just (AppendRespResultSuccess f1)
                                -> (HsJSONPB.pair "success" f1)
                              Hs.Just (AppendRespResultWrongExpectedVersion f2)
                                -> (HsJSONPB.pair "wrong_expected_version" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                       else encodeResult options)])
 
instance HsJSONPB.FromJSONPB AppendResp where
        parseJSONPB
          = (HsJSONPB.withObject "AppendResp"
               (\ obj ->
                  (Hs.pure AppendResp) <*>
                    (let parseResult parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AppendRespResultSuccess <$>
                                  (HsJSONPB.parseField parseObj "success"),
                                Hs.Just Hs.. AppendRespResultWrongExpectedVersion <$>
                                  (HsJSONPB.parseField parseObj "wrong_expected_version"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "result") Hs.>>=
                          (HsJSONPB.withObject "result" parseResult))
                         <|> (parseResult obj))))
 
instance HsJSONPB.ToJSON AppendResp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendResp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendResp where
        declareNamedSchema _
          = do let declare_result = HsJSONPB.declareSchemaRef
               appendRespResult <- declare_result Proxy.Proxy
               let _ = Hs.pure AppendResp <*> HsJSONPB.asProxy declare_result
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("result", appendRespResult)]}})
 
data AppendResp_Position = AppendResp_Position{appendResp_PositionCommitPosition
                                               :: Hs.Word64,
                                               appendResp_PositionPreparePosition :: Hs.Word64}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendResp_Position where
        nameOf _ = (Hs.fromString "AppendResp_Position")
 
instance HsProtobuf.HasDefault AppendResp_Position
 
instance HsProtobuf.Message AppendResp_Position where
        encodeMessage _
          AppendResp_Position{appendResp_PositionCommitPosition =
                                appendResp_PositionCommitPosition,
                              appendResp_PositionPreparePosition =
                                appendResp_PositionPreparePosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   appendResp_PositionCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   appendResp_PositionPreparePosition)])
        decodeMessage _
          = (Hs.pure AppendResp_Position) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AppendResp_Position where
        toJSONPB (AppendResp_Position f1 f2)
          = (HsJSONPB.object
               ["commit_position" .= f1, "prepare_position" .= f2])
        toEncodingPB (AppendResp_Position f1 f2)
          = (HsJSONPB.pairs
               ["commit_position" .= f1, "prepare_position" .= f2])
 
instance HsJSONPB.FromJSONPB AppendResp_Position where
        parseJSONPB
          = (HsJSONPB.withObject "AppendResp_Position"
               (\ obj ->
                  (Hs.pure AppendResp_Position) <*> obj .: "commit_position" <*>
                    obj .: "prepare_position"))
 
instance HsJSONPB.ToJSON AppendResp_Position where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendResp_Position where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendResp_Position where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               appendResp_PositionCommitPosition <- declare_commit_position
                                                      Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               appendResp_PositionPreparePosition <- declare_prepare_position
                                                       Proxy.Proxy
               let _ = Hs.pure AppendResp_Position <*>
                         HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_prepare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp_Position",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         appendResp_PositionCommitPosition),
                                                        ("prepare_position",
                                                         appendResp_PositionPreparePosition)]}})
 
data AppendResp_Success = AppendResp_Success{appendResp_SuccessCurrentRevisionOption
                                             :: Hs.Maybe AppendResp_SuccessCurrentRevisionOption,
                                             appendResp_SuccessPositionOption ::
                                             Hs.Maybe AppendResp_SuccessPositionOption}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendResp_Success where
        nameOf _ = (Hs.fromString "AppendResp_Success")
 
instance HsProtobuf.HasDefault AppendResp_Success
 
instance HsProtobuf.Message AppendResp_Success where
        encodeMessage _
          AppendResp_Success{appendResp_SuccessCurrentRevisionOption =
                               appendResp_SuccessCurrentRevisionOption,
                             appendResp_SuccessPositionOption =
                               appendResp_SuccessPositionOption}
          = (Hs.mconcat
               [case appendResp_SuccessCurrentRevisionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendResp_SuccessCurrentRevisionOptionCurrentRevision y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             AppendResp_SuccessCurrentRevisionOptionNoStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y))),
                case appendResp_SuccessPositionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendResp_SuccessPositionOptionPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Streams.AppendResp_Position)
                                        @(HsProtobuf.Nested Streams.AppendResp_Position)
                                        (Hs.Just y)))
                             AppendResp_SuccessPositionOptionNoPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AppendResp_Success) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure
                      (Hs.Just Hs..
                         AppendResp_SuccessCurrentRevisionOptionCurrentRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap AppendResp_SuccessCurrentRevisionOptionNoStream))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap AppendResp_SuccessPositionOptionPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.AppendResp_Position))
                        @(_ (Hs.Maybe Streams.AppendResp_Position))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap AppendResp_SuccessPositionOptionNoPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AppendResp_Success where
        toJSONPB (AppendResp_Success f1_or_f2 f3_or_f4)
          = (HsJSONPB.object
               [(let encodeCurrent_revision_option
                       = (case f1_or_f2 of
                              Hs.Just (AppendResp_SuccessCurrentRevisionOptionCurrentRevision f1)
                                -> (HsJSONPB.pair "current_revision" f1)
                              Hs.Just (AppendResp_SuccessCurrentRevisionOptionNoStream f2)
                                -> (HsJSONPB.pair "no_stream" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("current_revision_option" .=
                          (HsJSONPB.objectOrNull [encodeCurrent_revision_option] options))
                         options
                       else encodeCurrent_revision_option options),
                (let encodePosition_option
                       = (case f3_or_f4 of
                              Hs.Just (AppendResp_SuccessPositionOptionPosition f3)
                                -> (HsJSONPB.pair "position" f3)
                              Hs.Just (AppendResp_SuccessPositionOptionNoPosition f4)
                                -> (HsJSONPB.pair "no_position" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.objectOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
        toEncodingPB (AppendResp_Success f1_or_f2 f3_or_f4)
          = (HsJSONPB.pairs
               [(let encodeCurrent_revision_option
                       = (case f1_or_f2 of
                              Hs.Just (AppendResp_SuccessCurrentRevisionOptionCurrentRevision f1)
                                -> (HsJSONPB.pair "current_revision" f1)
                              Hs.Just (AppendResp_SuccessCurrentRevisionOptionNoStream f2)
                                -> (HsJSONPB.pair "no_stream" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("current_revision_option" .=
                          (HsJSONPB.pairsOrNull [encodeCurrent_revision_option] options))
                         options
                       else encodeCurrent_revision_option options),
                (let encodePosition_option
                       = (case f3_or_f4 of
                              Hs.Just (AppendResp_SuccessPositionOptionPosition f3)
                                -> (HsJSONPB.pair "position" f3)
                              Hs.Just (AppendResp_SuccessPositionOptionNoPosition f4)
                                -> (HsJSONPB.pair "no_position" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.pairsOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
 
instance HsJSONPB.FromJSONPB AppendResp_Success where
        parseJSONPB
          = (HsJSONPB.withObject "AppendResp_Success"
               (\ obj ->
                  (Hs.pure AppendResp_Success) <*>
                    (let parseCurrent_revision_option parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  AppendResp_SuccessCurrentRevisionOptionCurrentRevision
                                  <$> (HsJSONPB.parseField parseObj "current_revision"),
                                Hs.Just Hs.. AppendResp_SuccessCurrentRevisionOptionNoStream <$>
                                  (HsJSONPB.parseField parseObj "no_stream"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "current_revision_option") Hs.>>=
                          (HsJSONPB.withObject "current_revision_option"
                             parseCurrent_revision_option))
                         <|> (parseCurrent_revision_option obj))
                    <*>
                    (let parsePosition_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AppendResp_SuccessPositionOptionPosition <$>
                                  (HsJSONPB.parseField parseObj "position"),
                                Hs.Just Hs.. AppendResp_SuccessPositionOptionNoPosition <$>
                                  (HsJSONPB.parseField parseObj "no_position"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "position_option") Hs.>>=
                          (HsJSONPB.withObject "position_option" parsePosition_option))
                         <|> (parsePosition_option obj))))
 
instance HsJSONPB.ToJSON AppendResp_Success where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendResp_Success where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendResp_Success where
        declareNamedSchema _
          = do let declare_current_revision_option
                     = HsJSONPB.declareSchemaRef
               appendResp_SuccessCurrentRevisionOption <- declare_current_revision_option
                                                            Proxy.Proxy
               let declare_position_option = HsJSONPB.declareSchemaRef
               appendResp_SuccessPositionOption <- declare_position_option
                                                     Proxy.Proxy
               let _ = Hs.pure AppendResp_Success <*>
                         HsJSONPB.asProxy declare_current_revision_option
                         <*> HsJSONPB.asProxy declare_position_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp_Success",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("current_revision_option",
                                                         appendResp_SuccessCurrentRevisionOption),
                                                        ("position_option",
                                                         appendResp_SuccessPositionOption)]}})
 
data AppendResp_SuccessCurrentRevisionOption = AppendResp_SuccessCurrentRevisionOptionCurrentRevision Hs.Word64
                                             | AppendResp_SuccessCurrentRevisionOptionNoStream Shared.Empty
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named AppendResp_SuccessCurrentRevisionOption
         where
        nameOf _
          = (Hs.fromString "AppendResp_SuccessCurrentRevisionOption")
 
instance HsJSONPB.ToSchema AppendResp_SuccessCurrentRevisionOption
         where
        declareNamedSchema _
          = do let declare_current_revision = HsJSONPB.declareSchemaRef
               appendResp_SuccessCurrentRevisionOptionCurrentRevision <- declare_current_revision
                                                                           Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_SuccessCurrentRevisionOptionCurrentRevision
                         <*> HsJSONPB.asProxy declare_current_revision
               let declare_no_stream = HsJSONPB.declareSchemaRef
               appendResp_SuccessCurrentRevisionOptionNoStream <- declare_no_stream
                                                                    Proxy.Proxy
               let _ = Hs.pure AppendResp_SuccessCurrentRevisionOptionNoStream <*>
                         HsJSONPB.asProxy declare_no_stream
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp_SuccessCurrentRevisionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("current_revision",
                                                         appendResp_SuccessCurrentRevisionOptionCurrentRevision),
                                                        ("no_stream",
                                                         appendResp_SuccessCurrentRevisionOptionNoStream)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AppendResp_SuccessPositionOption = AppendResp_SuccessPositionOptionPosition Streams.AppendResp_Position
                                      | AppendResp_SuccessPositionOptionNoPosition Shared.Empty
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendResp_SuccessPositionOption where
        nameOf _ = (Hs.fromString "AppendResp_SuccessPositionOption")
 
instance HsJSONPB.ToSchema AppendResp_SuccessPositionOption where
        declareNamedSchema _
          = do let declare_position = HsJSONPB.declareSchemaRef
               appendResp_SuccessPositionOptionPosition <- declare_position
                                                             Proxy.Proxy
               let _ = Hs.pure AppendResp_SuccessPositionOptionPosition <*>
                         HsJSONPB.asProxy declare_position
               let declare_no_position = HsJSONPB.declareSchemaRef
               appendResp_SuccessPositionOptionNoPosition <- declare_no_position
                                                               Proxy.Proxy
               let _ = Hs.pure AppendResp_SuccessPositionOptionNoPosition <*>
                         HsJSONPB.asProxy declare_no_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp_SuccessPositionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position",
                                                         appendResp_SuccessPositionOptionPosition),
                                                        ("no_position",
                                                         appendResp_SuccessPositionOptionNoPosition)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AppendResp_WrongExpectedVersion = AppendResp_WrongExpectedVersion{appendResp_WrongExpectedVersionCurrentRevisionOption
                                                                       ::
                                                                       Hs.Maybe
                                                                         AppendResp_WrongExpectedVersionCurrentRevisionOption,
                                                                       appendResp_WrongExpectedVersionExpectedRevisionOption
                                                                       ::
                                                                       Hs.Maybe
                                                                         AppendResp_WrongExpectedVersionExpectedRevisionOption}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendResp_WrongExpectedVersion where
        nameOf _ = (Hs.fromString "AppendResp_WrongExpectedVersion")
 
instance HsProtobuf.HasDefault AppendResp_WrongExpectedVersion
 
instance HsProtobuf.Message AppendResp_WrongExpectedVersion where
        encodeMessage _
          AppendResp_WrongExpectedVersion{appendResp_WrongExpectedVersionCurrentRevisionOption
                                            = appendResp_WrongExpectedVersionCurrentRevisionOption,
                                          appendResp_WrongExpectedVersionExpectedRevisionOption =
                                            appendResp_WrongExpectedVersionExpectedRevisionOption}
          = (Hs.mconcat
               [case appendResp_WrongExpectedVersionCurrentRevisionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision
                               y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y))),
                case appendResp_WrongExpectedVersionExpectedRevisionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision
                               y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             AppendResp_WrongExpectedVersionExpectedRevisionOptionAny y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AppendResp_WrongExpectedVersion) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure
                      (Hs.Just Hs..
                         AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.fmap
                         AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure
                      (Hs.Just Hs..
                         AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure
                      (Hs.fmap AppendResp_WrongExpectedVersionExpectedRevisionOptionAny))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure
                      (Hs.fmap
                         AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AppendResp_WrongExpectedVersion where
        toJSONPB (AppendResp_WrongExpectedVersion f1_or_f2 f3_or_f4_or_f5)
          = (HsJSONPB.object
               [(let encodeCurrent_revision_option
                       = (case f1_or_f2 of
                              Hs.Just
                                (AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision
                                   f1)
                                -> (HsJSONPB.pair "current_revision" f1)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream f2)
                                -> (HsJSONPB.pair "no_stream" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("current_revision_option" .=
                          (HsJSONPB.objectOrNull [encodeCurrent_revision_option] options))
                         options
                       else encodeCurrent_revision_option options),
                (let encodeExpected_revision_option
                       = (case f3_or_f4_or_f5 of
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision
                                   f3)
                                -> (HsJSONPB.pair "expected_revision" f3)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists
                                   f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_revision_option" .=
                          (HsJSONPB.objectOrNull [encodeExpected_revision_option] options))
                         options
                       else encodeExpected_revision_option options)])
        toEncodingPB
          (AppendResp_WrongExpectedVersion f1_or_f2 f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               [(let encodeCurrent_revision_option
                       = (case f1_or_f2 of
                              Hs.Just
                                (AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision
                                   f1)
                                -> (HsJSONPB.pair "current_revision" f1)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream f2)
                                -> (HsJSONPB.pair "no_stream" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("current_revision_option" .=
                          (HsJSONPB.pairsOrNull [encodeCurrent_revision_option] options))
                         options
                       else encodeCurrent_revision_option options),
                (let encodeExpected_revision_option
                       = (case f3_or_f4_or_f5 of
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision
                                   f3)
                                -> (HsJSONPB.pair "expected_revision" f3)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just
                                (AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists
                                   f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_revision_option" .=
                          (HsJSONPB.pairsOrNull [encodeExpected_revision_option] options))
                         options
                       else encodeExpected_revision_option options)])
 
instance HsJSONPB.FromJSONPB AppendResp_WrongExpectedVersion where
        parseJSONPB
          = (HsJSONPB.withObject "AppendResp_WrongExpectedVersion"
               (\ obj ->
                  (Hs.pure AppendResp_WrongExpectedVersion) <*>
                    (let parseCurrent_revision_option parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision
                                  <$> (HsJSONPB.parseField parseObj "current_revision"),
                                Hs.Just Hs..
                                  AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream
                                  <$> (HsJSONPB.parseField parseObj "no_stream"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "current_revision_option") Hs.>>=
                          (HsJSONPB.withObject "current_revision_option"
                             parseCurrent_revision_option))
                         <|> (parseCurrent_revision_option obj))
                    <*>
                    (let parseExpected_revision_option parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision
                                  <$> (HsJSONPB.parseField parseObj "expected_revision"),
                                Hs.Just Hs..
                                  AppendResp_WrongExpectedVersionExpectedRevisionOptionAny
                                  <$> (HsJSONPB.parseField parseObj "any"),
                                Hs.Just Hs..
                                  AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists
                                  <$> (HsJSONPB.parseField parseObj "stream_exists"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "expected_revision_option") Hs.>>=
                          (HsJSONPB.withObject "expected_revision_option"
                             parseExpected_revision_option))
                         <|> (parseExpected_revision_option obj))))
 
instance HsJSONPB.ToJSON AppendResp_WrongExpectedVersion where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AppendResp_WrongExpectedVersion where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AppendResp_WrongExpectedVersion where
        declareNamedSchema _
          = do let declare_current_revision_option
                     = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionCurrentRevisionOption <- declare_current_revision_option
                                                                         Proxy.Proxy
               let declare_expected_revision_option = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionExpectedRevisionOption <- declare_expected_revision_option
                                                                          Proxy.Proxy
               let _ = Hs.pure AppendResp_WrongExpectedVersion <*>
                         HsJSONPB.asProxy declare_current_revision_option
                         <*> HsJSONPB.asProxy declare_expected_revision_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendResp_WrongExpectedVersion",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("current_revision_option",
                                                         appendResp_WrongExpectedVersionCurrentRevisionOption),
                                                        ("expected_revision_option",
                                                         appendResp_WrongExpectedVersionExpectedRevisionOption)]}})
 
data AppendResp_WrongExpectedVersionCurrentRevisionOption = AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision Hs.Word64
                                                          | AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream Shared.Empty
                                                          deriving (Hs.Show, Hs.Eq, Hs.Ord,
                                                                    Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named
         AppendResp_WrongExpectedVersionCurrentRevisionOption where
        nameOf _
          = (Hs.fromString
               "AppendResp_WrongExpectedVersionCurrentRevisionOption")
 
instance HsJSONPB.ToSchema
         AppendResp_WrongExpectedVersionCurrentRevisionOption where
        declareNamedSchema _
          = do let declare_current_revision = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision <- declare_current_revision
                                                                                        Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision
                         <*> HsJSONPB.asProxy declare_current_revision
               let declare_no_stream = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionCurrentRevisionOptionNoStream <- declare_no_stream
                                                                                 Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_WrongExpectedVersionCurrentRevisionOptionNoStream
                         <*> HsJSONPB.asProxy declare_no_stream
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just
                                           "AppendResp_WrongExpectedVersionCurrentRevisionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("current_revision",
                                                         appendResp_WrongExpectedVersionCurrentRevisionOptionCurrentRevision),
                                                        ("no_stream",
                                                         appendResp_WrongExpectedVersionCurrentRevisionOptionNoStream)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AppendResp_WrongExpectedVersionExpectedRevisionOption = AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision Hs.Word64
                                                           | AppendResp_WrongExpectedVersionExpectedRevisionOptionAny Shared.Empty
                                                           | AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists Shared.Empty
                                                           deriving (Hs.Show, Hs.Eq, Hs.Ord,
                                                                     Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named
         AppendResp_WrongExpectedVersionExpectedRevisionOption where
        nameOf _
          = (Hs.fromString
               "AppendResp_WrongExpectedVersionExpectedRevisionOption")
 
instance HsJSONPB.ToSchema
         AppendResp_WrongExpectedVersionExpectedRevisionOption where
        declareNamedSchema _
          = do let declare_expected_revision = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision <- declare_expected_revision
                                                                                          Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision
                         <*> HsJSONPB.asProxy declare_expected_revision
               let declare_any = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionExpectedRevisionOptionAny <- declare_any
                                                                             Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_WrongExpectedVersionExpectedRevisionOptionAny
                         <*> HsJSONPB.asProxy declare_any
               let declare_stream_exists = HsJSONPB.declareSchemaRef
               appendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists <- declare_stream_exists
                                                                                      Proxy.Proxy
               let _ = Hs.pure
                         AppendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists
                         <*> HsJSONPB.asProxy declare_stream_exists
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just
                                           "AppendResp_WrongExpectedVersionExpectedRevisionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("expected_revision",
                                                         appendResp_WrongExpectedVersionExpectedRevisionOptionExpectedRevision),
                                                        ("any",
                                                         appendResp_WrongExpectedVersionExpectedRevisionOptionAny),
                                                        ("stream_exists",
                                                         appendResp_WrongExpectedVersionExpectedRevisionOptionStreamExists)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AppendRespResult = AppendRespResultSuccess Streams.AppendResp_Success
                      | AppendRespResultWrongExpectedVersion Streams.AppendResp_WrongExpectedVersion
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AppendRespResult where
        nameOf _ = (Hs.fromString "AppendRespResult")
 
instance HsJSONPB.ToSchema AppendRespResult where
        declareNamedSchema _
          = do let declare_success = HsJSONPB.declareSchemaRef
               appendRespResultSuccess <- declare_success Proxy.Proxy
               let _ = Hs.pure AppendRespResultSuccess <*>
                         HsJSONPB.asProxy declare_success
               let declare_wrong_expected_version = HsJSONPB.declareSchemaRef
               appendRespResultWrongExpectedVersion <- declare_wrong_expected_version
                                                         Proxy.Proxy
               let _ = Hs.pure AppendRespResultWrongExpectedVersion <*>
                         HsJSONPB.asProxy declare_wrong_expected_version
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AppendRespResult",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("success", appendRespResultSuccess),
                                                        ("wrong_expected_version",
                                                         appendRespResultWrongExpectedVersion)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype DeleteReq = DeleteReq{deleteReqOptions ::
                              Hs.Maybe Streams.DeleteReq_Options}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DeleteReq where
        nameOf _ = (Hs.fromString "DeleteReq")
 
instance HsProtobuf.HasDefault DeleteReq
 
instance HsProtobuf.Message DeleteReq where
        encodeMessage _ DeleteReq{deleteReqOptions = deleteReqOptions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Streams.DeleteReq_Options)
                      @(HsProtobuf.Nested Streams.DeleteReq_Options)
                      deleteReqOptions))])
        decodeMessage _
          = (Hs.pure DeleteReq) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.DeleteReq_Options))
                 @(_ (Hs.Maybe Streams.DeleteReq_Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                "")]
 
instance HsJSONPB.ToJSONPB DeleteReq where
        toJSONPB (DeleteReq f1) = (HsJSONPB.object ["options" .= f1])
        toEncodingPB (DeleteReq f1) = (HsJSONPB.pairs ["options" .= f1])
 
instance HsJSONPB.FromJSONPB DeleteReq where
        parseJSONPB
          = (HsJSONPB.withObject "DeleteReq"
               (\ obj -> (Hs.pure DeleteReq) <*> obj .: "options"))
 
instance HsJSONPB.ToJSON DeleteReq where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DeleteReq where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DeleteReq where
        declareNamedSchema _
          = do let declare_options = HsJSONPB.declareSchemaRef
               deleteReqOptions <- declare_options Proxy.Proxy
               let _ = Hs.pure DeleteReq <*> HsJSONPB.asProxy declare_options
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("options", deleteReqOptions)]}})
 
data DeleteReq_Options = DeleteReq_Options{deleteReq_OptionsStreamIdentifier
                                           :: Hs.Maybe Shared.StreamIdentifier,
                                           deleteReq_OptionsExpectedStreamRevision ::
                                           Hs.Maybe DeleteReq_OptionsExpectedStreamRevision}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DeleteReq_Options where
        nameOf _ = (Hs.fromString "DeleteReq_Options")
 
instance HsProtobuf.HasDefault DeleteReq_Options
 
instance HsProtobuf.Message DeleteReq_Options where
        encodeMessage _
          DeleteReq_Options{deleteReq_OptionsStreamIdentifier =
                              deleteReq_OptionsStreamIdentifier,
                            deleteReq_OptionsExpectedStreamRevision =
                              deleteReq_OptionsExpectedStreamRevision}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      deleteReq_OptionsStreamIdentifier)),
                case deleteReq_OptionsExpectedStreamRevision of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             DeleteReq_OptionsExpectedStreamRevisionRevision y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             DeleteReq_OptionsExpectedStreamRevisionNoStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             DeleteReq_OptionsExpectedStreamRevisionAny y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             DeleteReq_OptionsExpectedStreamRevisionStreamExists y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure DeleteReq_Options) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.Just Hs.. DeleteReq_OptionsExpectedStreamRevisionRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap DeleteReq_OptionsExpectedStreamRevisionNoStream))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap DeleteReq_OptionsExpectedStreamRevisionAny)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure
                      (Hs.fmap DeleteReq_OptionsExpectedStreamRevisionStreamExists))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB DeleteReq_Options where
        toJSONPB (DeleteReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.objectOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
        toEncodingPB (DeleteReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (DeleteReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.pairsOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
 
instance HsJSONPB.FromJSONPB DeleteReq_Options where
        parseJSONPB
          = (HsJSONPB.withObject "DeleteReq_Options"
               (\ obj ->
                  (Hs.pure DeleteReq_Options) <*> obj .: "stream_identifier" <*>
                    (let parseExpected_stream_revision parseObj
                           = Hs.msum
                               [Hs.Just Hs.. DeleteReq_OptionsExpectedStreamRevisionRevision <$>
                                  (HsJSONPB.parseField parseObj "revision"),
                                Hs.Just Hs.. DeleteReq_OptionsExpectedStreamRevisionNoStream <$>
                                  (HsJSONPB.parseField parseObj "no_stream"),
                                Hs.Just Hs.. DeleteReq_OptionsExpectedStreamRevisionAny <$>
                                  (HsJSONPB.parseField parseObj "any"),
                                Hs.Just Hs.. DeleteReq_OptionsExpectedStreamRevisionStreamExists
                                  <$> (HsJSONPB.parseField parseObj "stream_exists"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "expected_stream_revision") Hs.>>=
                          (HsJSONPB.withObject "expected_stream_revision"
                             parseExpected_stream_revision))
                         <|> (parseExpected_stream_revision obj))))
 
instance HsJSONPB.ToJSON DeleteReq_Options where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DeleteReq_Options where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DeleteReq_Options where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               deleteReq_OptionsStreamIdentifier <- declare_stream_identifier
                                                      Proxy.Proxy
               let declare_expected_stream_revision = HsJSONPB.declareSchemaRef
               deleteReq_OptionsExpectedStreamRevision <- declare_expected_stream_revision
                                                            Proxy.Proxy
               let _ = Hs.pure DeleteReq_Options <*>
                         HsJSONPB.asProxy declare_stream_identifier
                         <*> HsJSONPB.asProxy declare_expected_stream_revision
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteReq_Options",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         deleteReq_OptionsStreamIdentifier),
                                                        ("expected_stream_revision",
                                                         deleteReq_OptionsExpectedStreamRevision)]}})
 
data DeleteReq_OptionsExpectedStreamRevision = DeleteReq_OptionsExpectedStreamRevisionRevision Hs.Word64
                                             | DeleteReq_OptionsExpectedStreamRevisionNoStream Shared.Empty
                                             | DeleteReq_OptionsExpectedStreamRevisionAny Shared.Empty
                                             | DeleteReq_OptionsExpectedStreamRevisionStreamExists Shared.Empty
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named DeleteReq_OptionsExpectedStreamRevision
         where
        nameOf _
          = (Hs.fromString "DeleteReq_OptionsExpectedStreamRevision")
 
instance HsJSONPB.ToSchema DeleteReq_OptionsExpectedStreamRevision
         where
        declareNamedSchema _
          = do let declare_revision = HsJSONPB.declareSchemaRef
               deleteReq_OptionsExpectedStreamRevisionRevision <- declare_revision
                                                                    Proxy.Proxy
               let _ = Hs.pure DeleteReq_OptionsExpectedStreamRevisionRevision <*>
                         HsJSONPB.asProxy declare_revision
               let declare_no_stream = HsJSONPB.declareSchemaRef
               deleteReq_OptionsExpectedStreamRevisionNoStream <- declare_no_stream
                                                                    Proxy.Proxy
               let _ = Hs.pure DeleteReq_OptionsExpectedStreamRevisionNoStream <*>
                         HsJSONPB.asProxy declare_no_stream
               let declare_any = HsJSONPB.declareSchemaRef
               deleteReq_OptionsExpectedStreamRevisionAny <- declare_any
                                                               Proxy.Proxy
               let _ = Hs.pure DeleteReq_OptionsExpectedStreamRevisionAny <*>
                         HsJSONPB.asProxy declare_any
               let declare_stream_exists = HsJSONPB.declareSchemaRef
               deleteReq_OptionsExpectedStreamRevisionStreamExists <- declare_stream_exists
                                                                        Proxy.Proxy
               let _ = Hs.pure DeleteReq_OptionsExpectedStreamRevisionStreamExists
                         <*> HsJSONPB.asProxy declare_stream_exists
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteReq_OptionsExpectedStreamRevision",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("revision",
                                                         deleteReq_OptionsExpectedStreamRevisionRevision),
                                                        ("no_stream",
                                                         deleteReq_OptionsExpectedStreamRevisionNoStream),
                                                        ("any",
                                                         deleteReq_OptionsExpectedStreamRevisionAny),
                                                        ("stream_exists",
                                                         deleteReq_OptionsExpectedStreamRevisionStreamExists)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype DeleteResp = DeleteResp{deleteRespPositionOption ::
                                Hs.Maybe DeleteRespPositionOption}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DeleteResp where
        nameOf _ = (Hs.fromString "DeleteResp")
 
instance HsProtobuf.HasDefault DeleteResp
 
instance HsProtobuf.Message DeleteResp where
        encodeMessage _
          DeleteResp{deleteRespPositionOption = deleteRespPositionOption}
          = (Hs.mconcat
               [case deleteRespPositionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             DeleteRespPositionOptionPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.DeleteResp_Position)
                                        @(HsProtobuf.Nested Streams.DeleteResp_Position)
                                        (Hs.Just y)))
                             DeleteRespPositionOptionNoPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure DeleteResp) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap DeleteRespPositionOptionPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.DeleteResp_Position))
                        @(_ (Hs.Maybe Streams.DeleteResp_Position))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap DeleteRespPositionOptionNoPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB DeleteResp where
        toJSONPB (DeleteResp f1_or_f2)
          = (HsJSONPB.object
               [(let encodePosition_option
                       = (case f1_or_f2 of
                              Hs.Just (DeleteRespPositionOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (DeleteRespPositionOptionNoPosition f2)
                                -> (HsJSONPB.pair "no_position" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.objectOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
        toEncodingPB (DeleteResp f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodePosition_option
                       = (case f1_or_f2 of
                              Hs.Just (DeleteRespPositionOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (DeleteRespPositionOptionNoPosition f2)
                                -> (HsJSONPB.pair "no_position" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.pairsOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
 
instance HsJSONPB.FromJSONPB DeleteResp where
        parseJSONPB
          = (HsJSONPB.withObject "DeleteResp"
               (\ obj ->
                  (Hs.pure DeleteResp) <*>
                    (let parsePosition_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. DeleteRespPositionOptionPosition <$>
                                  (HsJSONPB.parseField parseObj "position"),
                                Hs.Just Hs.. DeleteRespPositionOptionNoPosition <$>
                                  (HsJSONPB.parseField parseObj "no_position"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "position_option") Hs.>>=
                          (HsJSONPB.withObject "position_option" parsePosition_option))
                         <|> (parsePosition_option obj))))
 
instance HsJSONPB.ToJSON DeleteResp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DeleteResp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DeleteResp where
        declareNamedSchema _
          = do let declare_position_option = HsJSONPB.declareSchemaRef
               deleteRespPositionOption <- declare_position_option Proxy.Proxy
               let _ = Hs.pure DeleteResp <*>
                         HsJSONPB.asProxy declare_position_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteResp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position_option",
                                                         deleteRespPositionOption)]}})
 
data DeleteResp_Position = DeleteResp_Position{deleteResp_PositionCommitPosition
                                               :: Hs.Word64,
                                               deleteResp_PositionPreparePosition :: Hs.Word64}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DeleteResp_Position where
        nameOf _ = (Hs.fromString "DeleteResp_Position")
 
instance HsProtobuf.HasDefault DeleteResp_Position
 
instance HsProtobuf.Message DeleteResp_Position where
        encodeMessage _
          DeleteResp_Position{deleteResp_PositionCommitPosition =
                                deleteResp_PositionCommitPosition,
                              deleteResp_PositionPreparePosition =
                                deleteResp_PositionPreparePosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   deleteResp_PositionCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   deleteResp_PositionPreparePosition)])
        decodeMessage _
          = (Hs.pure DeleteResp_Position) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                "")]
 
instance HsJSONPB.ToJSONPB DeleteResp_Position where
        toJSONPB (DeleteResp_Position f1 f2)
          = (HsJSONPB.object
               ["commit_position" .= f1, "prepare_position" .= f2])
        toEncodingPB (DeleteResp_Position f1 f2)
          = (HsJSONPB.pairs
               ["commit_position" .= f1, "prepare_position" .= f2])
 
instance HsJSONPB.FromJSONPB DeleteResp_Position where
        parseJSONPB
          = (HsJSONPB.withObject "DeleteResp_Position"
               (\ obj ->
                  (Hs.pure DeleteResp_Position) <*> obj .: "commit_position" <*>
                    obj .: "prepare_position"))
 
instance HsJSONPB.ToJSON DeleteResp_Position where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DeleteResp_Position where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DeleteResp_Position where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               deleteResp_PositionCommitPosition <- declare_commit_position
                                                      Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               deleteResp_PositionPreparePosition <- declare_prepare_position
                                                       Proxy.Proxy
               let _ = Hs.pure DeleteResp_Position <*>
                         HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_prepare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteResp_Position",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         deleteResp_PositionCommitPosition),
                                                        ("prepare_position",
                                                         deleteResp_PositionPreparePosition)]}})
 
data DeleteRespPositionOption = DeleteRespPositionOptionPosition Streams.DeleteResp_Position
                              | DeleteRespPositionOptionNoPosition Shared.Empty
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DeleteRespPositionOption where
        nameOf _ = (Hs.fromString "DeleteRespPositionOption")
 
instance HsJSONPB.ToSchema DeleteRespPositionOption where
        declareNamedSchema _
          = do let declare_position = HsJSONPB.declareSchemaRef
               deleteRespPositionOptionPosition <- declare_position Proxy.Proxy
               let _ = Hs.pure DeleteRespPositionOptionPosition <*>
                         HsJSONPB.asProxy declare_position
               let declare_no_position = HsJSONPB.declareSchemaRef
               deleteRespPositionOptionNoPosition <- declare_no_position
                                                       Proxy.Proxy
               let _ = Hs.pure DeleteRespPositionOptionNoPosition <*>
                         HsJSONPB.asProxy declare_no_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DeleteRespPositionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position",
                                                         deleteRespPositionOptionPosition),
                                                        ("no_position",
                                                         deleteRespPositionOptionNoPosition)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype TombstoneReq = TombstoneReq{tombstoneReqOptions ::
                                    Hs.Maybe Streams.TombstoneReq_Options}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TombstoneReq where
        nameOf _ = (Hs.fromString "TombstoneReq")
 
instance HsProtobuf.HasDefault TombstoneReq
 
instance HsProtobuf.Message TombstoneReq where
        encodeMessage _
          TombstoneReq{tombstoneReqOptions = tombstoneReqOptions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Streams.TombstoneReq_Options)
                      @(HsProtobuf.Nested Streams.TombstoneReq_Options)
                      tombstoneReqOptions))])
        decodeMessage _
          = (Hs.pure TombstoneReq) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Streams.TombstoneReq_Options))
                 @(_ (Hs.Maybe Streams.TombstoneReq_Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TombstoneReq where
        toJSONPB (TombstoneReq f1) = (HsJSONPB.object ["options" .= f1])
        toEncodingPB (TombstoneReq f1) = (HsJSONPB.pairs ["options" .= f1])
 
instance HsJSONPB.FromJSONPB TombstoneReq where
        parseJSONPB
          = (HsJSONPB.withObject "TombstoneReq"
               (\ obj -> (Hs.pure TombstoneReq) <*> obj .: "options"))
 
instance HsJSONPB.ToJSON TombstoneReq where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TombstoneReq where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TombstoneReq where
        declareNamedSchema _
          = do let declare_options = HsJSONPB.declareSchemaRef
               tombstoneReqOptions <- declare_options Proxy.Proxy
               let _ = Hs.pure TombstoneReq <*> HsJSONPB.asProxy declare_options
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("options", tombstoneReqOptions)]}})
 
data TombstoneReq_Options = TombstoneReq_Options{tombstoneReq_OptionsStreamIdentifier
                                                 :: Hs.Maybe Shared.StreamIdentifier,
                                                 tombstoneReq_OptionsExpectedStreamRevision ::
                                                 Hs.Maybe
                                                   TombstoneReq_OptionsExpectedStreamRevision}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TombstoneReq_Options where
        nameOf _ = (Hs.fromString "TombstoneReq_Options")
 
instance HsProtobuf.HasDefault TombstoneReq_Options
 
instance HsProtobuf.Message TombstoneReq_Options where
        encodeMessage _
          TombstoneReq_Options{tombstoneReq_OptionsStreamIdentifier =
                                 tombstoneReq_OptionsStreamIdentifier,
                               tombstoneReq_OptionsExpectedStreamRevision =
                                 tombstoneReq_OptionsExpectedStreamRevision}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.StreamIdentifier)
                      @(HsProtobuf.Nested Shared.StreamIdentifier)
                      tombstoneReq_OptionsStreamIdentifier)),
                case tombstoneReq_OptionsExpectedStreamRevision of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TombstoneReq_OptionsExpectedStreamRevisionRevision y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             TombstoneReq_OptionsExpectedStreamRevisionNoStream y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             TombstoneReq_OptionsExpectedStreamRevisionAny y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))
                             TombstoneReq_OptionsExpectedStreamRevisionStreamExists y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure TombstoneReq_Options) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.StreamIdentifier))
                 @(_ (Hs.Maybe Shared.StreamIdentifier))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.Just Hs.. TombstoneReq_OptionsExpectedStreamRevisionRevision))
                     <*> HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure
                      (Hs.fmap TombstoneReq_OptionsExpectedStreamRevisionNoStream))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap TombstoneReq_OptionsExpectedStreamRevisionAny))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure
                      (Hs.fmap TombstoneReq_OptionsExpectedStreamRevisionStreamExists))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "StreamIdentifier"])))))
                (HsProtobuf.Single "stream_identifier")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TombstoneReq_Options where
        toJSONPB (TombstoneReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.objectOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
        toEncodingPB (TombstoneReq_Options f1 f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               ["stream_identifier" .= f1,
                (let encodeExpected_stream_revision
                       = (case f2_or_f3_or_f4_or_f5 of
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionRevision f2)
                                -> (HsJSONPB.pair "revision" f2)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionNoStream f3)
                                -> (HsJSONPB.pair "no_stream" f3)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionAny f4)
                                -> (HsJSONPB.pair "any" f4)
                              Hs.Just (TombstoneReq_OptionsExpectedStreamRevisionStreamExists f5)
                                -> (HsJSONPB.pair "stream_exists" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("expected_stream_revision" .=
                          (HsJSONPB.pairsOrNull [encodeExpected_stream_revision] options))
                         options
                       else encodeExpected_stream_revision options)])
 
instance HsJSONPB.FromJSONPB TombstoneReq_Options where
        parseJSONPB
          = (HsJSONPB.withObject "TombstoneReq_Options"
               (\ obj ->
                  (Hs.pure TombstoneReq_Options) <*> obj .: "stream_identifier" <*>
                    (let parseExpected_stream_revision parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TombstoneReq_OptionsExpectedStreamRevisionRevision
                                  <$> (HsJSONPB.parseField parseObj "revision"),
                                Hs.Just Hs.. TombstoneReq_OptionsExpectedStreamRevisionNoStream <$>
                                  (HsJSONPB.parseField parseObj "no_stream"),
                                Hs.Just Hs.. TombstoneReq_OptionsExpectedStreamRevisionAny <$>
                                  (HsJSONPB.parseField parseObj "any"),
                                Hs.Just Hs.. TombstoneReq_OptionsExpectedStreamRevisionStreamExists
                                  <$> (HsJSONPB.parseField parseObj "stream_exists"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "expected_stream_revision") Hs.>>=
                          (HsJSONPB.withObject "expected_stream_revision"
                             parseExpected_stream_revision))
                         <|> (parseExpected_stream_revision obj))))
 
instance HsJSONPB.ToJSON TombstoneReq_Options where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TombstoneReq_Options where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TombstoneReq_Options where
        declareNamedSchema _
          = do let declare_stream_identifier = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsStreamIdentifier <- declare_stream_identifier
                                                         Proxy.Proxy
               let declare_expected_stream_revision = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsExpectedStreamRevision <- declare_expected_stream_revision
                                                               Proxy.Proxy
               let _ = Hs.pure TombstoneReq_Options <*>
                         HsJSONPB.asProxy declare_stream_identifier
                         <*> HsJSONPB.asProxy declare_expected_stream_revision
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneReq_Options",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_identifier",
                                                         tombstoneReq_OptionsStreamIdentifier),
                                                        ("expected_stream_revision",
                                                         tombstoneReq_OptionsExpectedStreamRevision)]}})
 
data TombstoneReq_OptionsExpectedStreamRevision = TombstoneReq_OptionsExpectedStreamRevisionRevision Hs.Word64
                                                | TombstoneReq_OptionsExpectedStreamRevisionNoStream Shared.Empty
                                                | TombstoneReq_OptionsExpectedStreamRevisionAny Shared.Empty
                                                | TombstoneReq_OptionsExpectedStreamRevisionStreamExists Shared.Empty
                                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                          Hs.NFData)
 
instance HsProtobuf.Named
         TombstoneReq_OptionsExpectedStreamRevision where
        nameOf _
          = (Hs.fromString "TombstoneReq_OptionsExpectedStreamRevision")
 
instance HsJSONPB.ToSchema
         TombstoneReq_OptionsExpectedStreamRevision where
        declareNamedSchema _
          = do let declare_revision = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsExpectedStreamRevisionRevision <- declare_revision
                                                                       Proxy.Proxy
               let _ = Hs.pure TombstoneReq_OptionsExpectedStreamRevisionRevision
                         <*> HsJSONPB.asProxy declare_revision
               let declare_no_stream = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsExpectedStreamRevisionNoStream <- declare_no_stream
                                                                       Proxy.Proxy
               let _ = Hs.pure TombstoneReq_OptionsExpectedStreamRevisionNoStream
                         <*> HsJSONPB.asProxy declare_no_stream
               let declare_any = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsExpectedStreamRevisionAny <- declare_any
                                                                  Proxy.Proxy
               let _ = Hs.pure TombstoneReq_OptionsExpectedStreamRevisionAny <*>
                         HsJSONPB.asProxy declare_any
               let declare_stream_exists = HsJSONPB.declareSchemaRef
               tombstoneReq_OptionsExpectedStreamRevisionStreamExists <- declare_stream_exists
                                                                           Proxy.Proxy
               let _ = Hs.pure
                         TombstoneReq_OptionsExpectedStreamRevisionStreamExists
                         <*> HsJSONPB.asProxy declare_stream_exists
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneReq_OptionsExpectedStreamRevision",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("revision",
                                                         tombstoneReq_OptionsExpectedStreamRevisionRevision),
                                                        ("no_stream",
                                                         tombstoneReq_OptionsExpectedStreamRevisionNoStream),
                                                        ("any",
                                                         tombstoneReq_OptionsExpectedStreamRevisionAny),
                                                        ("stream_exists",
                                                         tombstoneReq_OptionsExpectedStreamRevisionStreamExists)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype TombstoneResp = TombstoneResp{tombstoneRespPositionOption
                                      :: Hs.Maybe TombstoneRespPositionOption}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TombstoneResp where
        nameOf _ = (Hs.fromString "TombstoneResp")
 
instance HsProtobuf.HasDefault TombstoneResp
 
instance HsProtobuf.Message TombstoneResp where
        encodeMessage _
          TombstoneResp{tombstoneRespPositionOption =
                          tombstoneRespPositionOption}
          = (Hs.mconcat
               [case tombstoneRespPositionOption of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TombstoneRespPositionOptionPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Streams.TombstoneResp_Position)
                                        @(HsProtobuf.Nested Streams.TombstoneResp_Position)
                                        (Hs.Just y)))
                             TombstoneRespPositionOptionNoPosition y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Shared.Empty)
                                        @(HsProtobuf.Nested Shared.Empty)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure TombstoneResp) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap TombstoneRespPositionOptionPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Streams.TombstoneResp_Position))
                        @(_ (Hs.Maybe Streams.TombstoneResp_Position))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap TombstoneRespPositionOptionNoPosition)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Shared.Empty))
                        @(_ (Hs.Maybe Shared.Empty))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB TombstoneResp where
        toJSONPB (TombstoneResp f1_or_f2)
          = (HsJSONPB.object
               [(let encodePosition_option
                       = (case f1_or_f2 of
                              Hs.Just (TombstoneRespPositionOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (TombstoneRespPositionOptionNoPosition f2)
                                -> (HsJSONPB.pair "no_position" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.objectOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
        toEncodingPB (TombstoneResp f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodePosition_option
                       = (case f1_or_f2 of
                              Hs.Just (TombstoneRespPositionOptionPosition f1)
                                -> (HsJSONPB.pair "position" f1)
                              Hs.Just (TombstoneRespPositionOptionNoPosition f2)
                                -> (HsJSONPB.pair "no_position" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("position_option" .=
                          (HsJSONPB.pairsOrNull [encodePosition_option] options))
                         options
                       else encodePosition_option options)])
 
instance HsJSONPB.FromJSONPB TombstoneResp where
        parseJSONPB
          = (HsJSONPB.withObject "TombstoneResp"
               (\ obj ->
                  (Hs.pure TombstoneResp) <*>
                    (let parsePosition_option parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TombstoneRespPositionOptionPosition <$>
                                  (HsJSONPB.parseField parseObj "position"),
                                Hs.Just Hs.. TombstoneRespPositionOptionNoPosition <$>
                                  (HsJSONPB.parseField parseObj "no_position"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "position_option") Hs.>>=
                          (HsJSONPB.withObject "position_option" parsePosition_option))
                         <|> (parsePosition_option obj))))
 
instance HsJSONPB.ToJSON TombstoneResp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TombstoneResp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TombstoneResp where
        declareNamedSchema _
          = do let declare_position_option = HsJSONPB.declareSchemaRef
               tombstoneRespPositionOption <- declare_position_option Proxy.Proxy
               let _ = Hs.pure TombstoneResp <*>
                         HsJSONPB.asProxy declare_position_option
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneResp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position_option",
                                                         tombstoneRespPositionOption)]}})
 
data TombstoneResp_Position = TombstoneResp_Position{tombstoneResp_PositionCommitPosition
                                                     :: Hs.Word64,
                                                     tombstoneResp_PositionPreparePosition ::
                                                     Hs.Word64}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TombstoneResp_Position where
        nameOf _ = (Hs.fromString "TombstoneResp_Position")
 
instance HsProtobuf.HasDefault TombstoneResp_Position
 
instance HsProtobuf.Message TombstoneResp_Position where
        encodeMessage _
          TombstoneResp_Position{tombstoneResp_PositionCommitPosition =
                                   tombstoneResp_PositionCommitPosition,
                                 tombstoneResp_PositionPreparePosition =
                                   tombstoneResp_PositionPreparePosition}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   tombstoneResp_PositionCommitPosition),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   tombstoneResp_PositionPreparePosition)])
        decodeMessage _
          = (Hs.pure TombstoneResp_Position) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "commit_position")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "prepare_position")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TombstoneResp_Position where
        toJSONPB (TombstoneResp_Position f1 f2)
          = (HsJSONPB.object
               ["commit_position" .= f1, "prepare_position" .= f2])
        toEncodingPB (TombstoneResp_Position f1 f2)
          = (HsJSONPB.pairs
               ["commit_position" .= f1, "prepare_position" .= f2])
 
instance HsJSONPB.FromJSONPB TombstoneResp_Position where
        parseJSONPB
          = (HsJSONPB.withObject "TombstoneResp_Position"
               (\ obj ->
                  (Hs.pure TombstoneResp_Position) <*> obj .: "commit_position" <*>
                    obj .: "prepare_position"))
 
instance HsJSONPB.ToJSON TombstoneResp_Position where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TombstoneResp_Position where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TombstoneResp_Position where
        declareNamedSchema _
          = do let declare_commit_position = HsJSONPB.declareSchemaRef
               tombstoneResp_PositionCommitPosition <- declare_commit_position
                                                         Proxy.Proxy
               let declare_prepare_position = HsJSONPB.declareSchemaRef
               tombstoneResp_PositionPreparePosition <- declare_prepare_position
                                                          Proxy.Proxy
               let _ = Hs.pure TombstoneResp_Position <*>
                         HsJSONPB.asProxy declare_commit_position
                         <*> HsJSONPB.asProxy declare_prepare_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneResp_Position",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("commit_position",
                                                         tombstoneResp_PositionCommitPosition),
                                                        ("prepare_position",
                                                         tombstoneResp_PositionPreparePosition)]}})
 
data TombstoneRespPositionOption = TombstoneRespPositionOptionPosition Streams.TombstoneResp_Position
                                 | TombstoneRespPositionOptionNoPosition Shared.Empty
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TombstoneRespPositionOption where
        nameOf _ = (Hs.fromString "TombstoneRespPositionOption")
 
instance HsJSONPB.ToSchema TombstoneRespPositionOption where
        declareNamedSchema _
          = do let declare_position = HsJSONPB.declareSchemaRef
               tombstoneRespPositionOptionPosition <- declare_position Proxy.Proxy
               let _ = Hs.pure TombstoneRespPositionOptionPosition <*>
                         HsJSONPB.asProxy declare_position
               let declare_no_position = HsJSONPB.declareSchemaRef
               tombstoneRespPositionOptionNoPosition <- declare_no_position
                                                          Proxy.Proxy
               let _ = Hs.pure TombstoneRespPositionOptionNoPosition <*>
                         HsJSONPB.asProxy declare_no_position
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TombstoneRespPositionOption",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("position",
                                                         tombstoneRespPositionOptionPosition),
                                                        ("no_position",
                                                         tombstoneRespPositionOptionNoPosition)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})