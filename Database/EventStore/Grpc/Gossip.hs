{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Gossip where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Shared
 
data Gossip request response = Gossip{gossipRead ::
                                      request 'HsGRPC.Normal Shared.Empty Gossip.ClusterInfo ->
                                        Hs.IO (response 'HsGRPC.Normal Gossip.ClusterInfo)}
                             deriving Hs.Generic
 
gossipServer ::
               Gossip HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
gossipServer Gossip{gossipRead = gossipRead}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/event_store.client.gossip.Gossip/Read")
                                   (HsGRPC.convertGeneratedServerHandler gossipRead))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
gossipClient ::
               HsGRPC.Client ->
                 Hs.IO (Gossip HsGRPC.ClientRequest HsGRPC.ClientResult)
gossipClient client
  = (Hs.pure Gossip) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/event_store.client.gossip.Gossip/Read")))
 
newtype ClusterInfo = ClusterInfo{clusterInfoMembers ::
                                  Hs.Vector Gossip.MemberInfo}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ClusterInfo where
        nameOf _ = (Hs.fromString "ClusterInfo")
 
instance HsProtobuf.HasDefault ClusterInfo
 
instance HsProtobuf.Message ClusterInfo where
        encodeMessage _
          ClusterInfo{clusterInfoMembers = clusterInfoMembers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Gossip.MemberInfo)
                      @(HsProtobuf.NestedVec Gossip.MemberInfo)
                      clusterInfoMembers))])
        decodeMessage _
          = (Hs.pure ClusterInfo) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Gossip.MemberInfo))
                 @(_ (Hs.Vector Gossip.MemberInfo))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "MemberInfo")))
                (HsProtobuf.Single "members")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ClusterInfo where
        toJSONPB (ClusterInfo f1) = (HsJSONPB.object ["members" .= f1])
        toEncodingPB (ClusterInfo f1) = (HsJSONPB.pairs ["members" .= f1])
 
instance HsJSONPB.FromJSONPB ClusterInfo where
        parseJSONPB
          = (HsJSONPB.withObject "ClusterInfo"
               (\ obj -> (Hs.pure ClusterInfo) <*> obj .: "members"))
 
instance HsJSONPB.ToJSON ClusterInfo where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ClusterInfo where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ClusterInfo where
        declareNamedSchema _
          = do let declare_members = HsJSONPB.declareSchemaRef
               clusterInfoMembers <- declare_members Proxy.Proxy
               let _ = Hs.pure ClusterInfo <*> HsJSONPB.asProxy declare_members
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ClusterInfo",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("members", clusterInfoMembers)]}})
 
data EndPoint = EndPoint{endPointAddress :: Hs.Text,
                         endPointPort :: Hs.Word32}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EndPoint where
        nameOf _ = (Hs.fromString "EndPoint")
 
instance HsProtobuf.HasDefault EndPoint
 
instance HsProtobuf.Message EndPoint where
        encodeMessage _
          EndPoint{endPointAddress = endPointAddress,
                   endPointPort = endPointPort}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   endPointAddress),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   endPointPort)])
        decodeMessage _
          = (Hs.pure EndPoint) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "address")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "port")
                []
                "")]
 
instance HsJSONPB.ToJSONPB EndPoint where
        toJSONPB (EndPoint f1 f2)
          = (HsJSONPB.object ["address" .= f1, "port" .= f2])
        toEncodingPB (EndPoint f1 f2)
          = (HsJSONPB.pairs ["address" .= f1, "port" .= f2])
 
instance HsJSONPB.FromJSONPB EndPoint where
        parseJSONPB
          = (HsJSONPB.withObject "EndPoint"
               (\ obj ->
                  (Hs.pure EndPoint) <*> obj .: "address" <*> obj .: "port"))
 
instance HsJSONPB.ToJSON EndPoint where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON EndPoint where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema EndPoint where
        declareNamedSchema _
          = do let declare_address = HsJSONPB.declareSchemaRef
               endPointAddress <- declare_address Proxy.Proxy
               let declare_port = HsJSONPB.declareSchemaRef
               endPointPort <- declare_port Proxy.Proxy
               let _ = Hs.pure EndPoint <*> HsJSONPB.asProxy declare_address <*>
                         HsJSONPB.asProxy declare_port
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EndPoint",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("address", endPointAddress),
                                                        ("port", endPointPort)]}})
 
data MemberInfo = MemberInfo{memberInfoInstanceId ::
                             Hs.Maybe Shared.UUID,
                             memberInfoTimeStamp :: Hs.Int64,
                             memberInfoState ::
                             HsProtobuf.Enumerated Gossip.MemberInfo_VNodeState,
                             memberInfoIsAlive :: Hs.Bool,
                             memberInfoHttpEndPoint :: Hs.Maybe Gossip.EndPoint}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MemberInfo where
        nameOf _ = (Hs.fromString "MemberInfo")
 
instance HsProtobuf.HasDefault MemberInfo
 
instance HsProtobuf.Message MemberInfo where
        encodeMessage _
          MemberInfo{memberInfoInstanceId = memberInfoInstanceId,
                     memberInfoTimeStamp = memberInfoTimeStamp,
                     memberInfoState = memberInfoState,
                     memberInfoIsAlive = memberInfoIsAlive,
                     memberInfoHttpEndPoint = memberInfoHttpEndPoint}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Shared.UUID) @(HsProtobuf.Nested Shared.UUID)
                      memberInfoInstanceId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   memberInfoTimeStamp),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   memberInfoState),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   memberInfoIsAlive),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Maybe Gossip.EndPoint)
                      @(HsProtobuf.Nested Gossip.EndPoint)
                      memberInfoHttpEndPoint))])
        decodeMessage _
          = (Hs.pure MemberInfo) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Shared.UUID))
                 @(_ (Hs.Maybe Shared.UUID))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Gossip.EndPoint))
                 @(_ (Hs.Maybe Gossip.EndPoint))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path
                            ("event_store" Hs.:| ["client", "shared", "UUID"])))))
                (HsProtobuf.Single "instance_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "time_stamp")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "VNodeState")))
                (HsProtobuf.Single "state")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "is_alive")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "EndPoint")))
                (HsProtobuf.Single "http_end_point")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MemberInfo where
        toJSONPB (MemberInfo f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["instance_id" .= f1, "time_stamp" .= f2, "state" .= f3,
                "is_alive" .= f4, "http_end_point" .= f5])
        toEncodingPB (MemberInfo f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["instance_id" .= f1, "time_stamp" .= f2, "state" .= f3,
                "is_alive" .= f4, "http_end_point" .= f5])
 
instance HsJSONPB.FromJSONPB MemberInfo where
        parseJSONPB
          = (HsJSONPB.withObject "MemberInfo"
               (\ obj ->
                  (Hs.pure MemberInfo) <*> obj .: "instance_id" <*>
                    obj .: "time_stamp"
                    <*> obj .: "state"
                    <*> obj .: "is_alive"
                    <*> obj .: "http_end_point"))
 
instance HsJSONPB.ToJSON MemberInfo where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MemberInfo where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MemberInfo where
        declareNamedSchema _
          = do let declare_instance_id = HsJSONPB.declareSchemaRef
               memberInfoInstanceId <- declare_instance_id Proxy.Proxy
               let declare_time_stamp = HsJSONPB.declareSchemaRef
               memberInfoTimeStamp <- declare_time_stamp Proxy.Proxy
               let declare_state = HsJSONPB.declareSchemaRef
               memberInfoState <- declare_state Proxy.Proxy
               let declare_is_alive = HsJSONPB.declareSchemaRef
               memberInfoIsAlive <- declare_is_alive Proxy.Proxy
               let declare_http_end_point = HsJSONPB.declareSchemaRef
               memberInfoHttpEndPoint <- declare_http_end_point Proxy.Proxy
               let _ = Hs.pure MemberInfo <*> HsJSONPB.asProxy declare_instance_id
                         <*> HsJSONPB.asProxy declare_time_stamp
                         <*> HsJSONPB.asProxy declare_state
                         <*> HsJSONPB.asProxy declare_is_alive
                         <*> HsJSONPB.asProxy declare_http_end_point
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MemberInfo",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("instance_id", memberInfoInstanceId),
                                                        ("time_stamp", memberInfoTimeStamp),
                                                        ("state", memberInfoState),
                                                        ("is_alive", memberInfoIsAlive),
                                                        ("http_end_point",
                                                         memberInfoHttpEndPoint)]}})
 
data MemberInfo_VNodeState = MemberInfo_VNodeStateInitializing
                           | MemberInfo_VNodeStateDiscoverLeader
                           | MemberInfo_VNodeStateUnknown
                           | MemberInfo_VNodeStatePreReplica
                           | MemberInfo_VNodeStateCatchingUp
                           | MemberInfo_VNodeStateClone
                           | MemberInfo_VNodeStateFollower
                           | MemberInfo_VNodeStatePreLeader
                           | MemberInfo_VNodeStateLeader
                           | MemberInfo_VNodeStateManager
                           | MemberInfo_VNodeStateShuttingDown
                           | MemberInfo_VNodeStateShutdown
                           | MemberInfo_VNodeStateReadOnlyLeaderless
                           | MemberInfo_VNodeStatePreReadOnlyReplica
                           | MemberInfo_VNodeStateReadOnlyReplica
                           | MemberInfo_VNodeStateResigningLeader
                           deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MemberInfo_VNodeState where
        nameOf _ = (Hs.fromString "MemberInfo_VNodeState")
 
instance HsProtobuf.HasDefault MemberInfo_VNodeState
 
instance Hs.Bounded MemberInfo_VNodeState where
        minBound = MemberInfo_VNodeStateInitializing
        maxBound = MemberInfo_VNodeStateResigningLeader
 
instance Hs.Ord MemberInfo_VNodeState where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum MemberInfo_VNodeState where
        toProtoEnumMay 0 = Hs.Just MemberInfo_VNodeStateInitializing
        toProtoEnumMay 1 = Hs.Just MemberInfo_VNodeStateDiscoverLeader
        toProtoEnumMay 2 = Hs.Just MemberInfo_VNodeStateUnknown
        toProtoEnumMay 3 = Hs.Just MemberInfo_VNodeStatePreReplica
        toProtoEnumMay 4 = Hs.Just MemberInfo_VNodeStateCatchingUp
        toProtoEnumMay 5 = Hs.Just MemberInfo_VNodeStateClone
        toProtoEnumMay 6 = Hs.Just MemberInfo_VNodeStateFollower
        toProtoEnumMay 7 = Hs.Just MemberInfo_VNodeStatePreLeader
        toProtoEnumMay 8 = Hs.Just MemberInfo_VNodeStateLeader
        toProtoEnumMay 9 = Hs.Just MemberInfo_VNodeStateManager
        toProtoEnumMay 10 = Hs.Just MemberInfo_VNodeStateShuttingDown
        toProtoEnumMay 11 = Hs.Just MemberInfo_VNodeStateShutdown
        toProtoEnumMay 12 = Hs.Just MemberInfo_VNodeStateReadOnlyLeaderless
        toProtoEnumMay 13 = Hs.Just MemberInfo_VNodeStatePreReadOnlyReplica
        toProtoEnumMay 14 = Hs.Just MemberInfo_VNodeStateReadOnlyReplica
        toProtoEnumMay 15 = Hs.Just MemberInfo_VNodeStateResigningLeader
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (MemberInfo_VNodeStateInitializing) = 0
        fromProtoEnum (MemberInfo_VNodeStateDiscoverLeader) = 1
        fromProtoEnum (MemberInfo_VNodeStateUnknown) = 2
        fromProtoEnum (MemberInfo_VNodeStatePreReplica) = 3
        fromProtoEnum (MemberInfo_VNodeStateCatchingUp) = 4
        fromProtoEnum (MemberInfo_VNodeStateClone) = 5
        fromProtoEnum (MemberInfo_VNodeStateFollower) = 6
        fromProtoEnum (MemberInfo_VNodeStatePreLeader) = 7
        fromProtoEnum (MemberInfo_VNodeStateLeader) = 8
        fromProtoEnum (MemberInfo_VNodeStateManager) = 9
        fromProtoEnum (MemberInfo_VNodeStateShuttingDown) = 10
        fromProtoEnum (MemberInfo_VNodeStateShutdown) = 11
        fromProtoEnum (MemberInfo_VNodeStateReadOnlyLeaderless) = 12
        fromProtoEnum (MemberInfo_VNodeStatePreReadOnlyReplica) = 13
        fromProtoEnum (MemberInfo_VNodeStateReadOnlyReplica) = 14
        fromProtoEnum (MemberInfo_VNodeStateResigningLeader) = 15
 
instance HsJSONPB.ToJSONPB MemberInfo_VNodeState where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB MemberInfo_VNodeState where
        parseJSONPB (HsJSONPB.String "Initializing")
          = Hs.pure MemberInfo_VNodeStateInitializing
        parseJSONPB (HsJSONPB.String "DiscoverLeader")
          = Hs.pure MemberInfo_VNodeStateDiscoverLeader
        parseJSONPB (HsJSONPB.String "Unknown")
          = Hs.pure MemberInfo_VNodeStateUnknown
        parseJSONPB (HsJSONPB.String "PreReplica")
          = Hs.pure MemberInfo_VNodeStatePreReplica
        parseJSONPB (HsJSONPB.String "CatchingUp")
          = Hs.pure MemberInfo_VNodeStateCatchingUp
        parseJSONPB (HsJSONPB.String "Clone")
          = Hs.pure MemberInfo_VNodeStateClone
        parseJSONPB (HsJSONPB.String "Follower")
          = Hs.pure MemberInfo_VNodeStateFollower
        parseJSONPB (HsJSONPB.String "PreLeader")
          = Hs.pure MemberInfo_VNodeStatePreLeader
        parseJSONPB (HsJSONPB.String "Leader")
          = Hs.pure MemberInfo_VNodeStateLeader
        parseJSONPB (HsJSONPB.String "Manager")
          = Hs.pure MemberInfo_VNodeStateManager
        parseJSONPB (HsJSONPB.String "ShuttingDown")
          = Hs.pure MemberInfo_VNodeStateShuttingDown
        parseJSONPB (HsJSONPB.String "Shutdown")
          = Hs.pure MemberInfo_VNodeStateShutdown
        parseJSONPB (HsJSONPB.String "ReadOnlyLeaderless")
          = Hs.pure MemberInfo_VNodeStateReadOnlyLeaderless
        parseJSONPB (HsJSONPB.String "PreReadOnlyReplica")
          = Hs.pure MemberInfo_VNodeStatePreReadOnlyReplica
        parseJSONPB (HsJSONPB.String "ReadOnlyReplica")
          = Hs.pure MemberInfo_VNodeStateReadOnlyReplica
        parseJSONPB (HsJSONPB.String "ResigningLeader")
          = Hs.pure MemberInfo_VNodeStateResigningLeader
        parseJSONPB v = (HsJSONPB.typeMismatch "MemberInfo_VNodeState" v)
 
instance HsJSONPB.ToJSON MemberInfo_VNodeState where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MemberInfo_VNodeState where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite MemberInfo_VNodeState